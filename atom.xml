<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codingの鹿先生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://calvinhwang123.github.io/"/>
  <updated>2018-12-11T14:57:19.282Z</updated>
  <id>https://calvinhwang123.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 登录拦截器</title>
    <link href="https://calvinhwang123.github.io/2018/12/11/spring-boot-login-interceptor/"/>
    <id>https://calvinhwang123.github.io/2018/12/11/spring-boot-login-interceptor/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2018-12-11T14:57:19.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>首先确保工程引入了 starter-web 和 thymeleaf 依赖。</p><a id="more"></a><h3 id="1、编写自定义-web-mvc-配置类"><a href="#1、编写自定义-web-mvc-配置类" class="headerlink" title="1、编写自定义 web mvc 配置类"></a>1、编写自定义 web mvc 配置类</h3><p>该配置类的作用是自定义请求映射与页面跳转。（注意 Spring Boot 2 是 implements WebMvcConfigurer）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、编写-login-html-登录页"><a href="#2、编写-login-html-登录页" class="headerlink" title="2、编写 login.html 登录页"></a>2、编写 login.html 登录页</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123; /asserts/css/bootstrap.min.css &#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123; /asserts/css/signin.css &#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">th:action</span>=<span class="string">"@&#123; /user/login &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"$&#123; /asserts/img/bootstrap-solid.svg &#125;"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--登录信息反馈--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">"$&#123; not #strings.isEmpty(errorMsg) &#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123; errorMsg &#125;"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> Remember me</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>p.s. 为了使页面实时生效，我们需要在 application.properties 下添加禁用缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 开发模式下禁用缓存</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure><p>并且为了防止 js, css 等资源请求跳转后访问不到，我们使用 th:href 和 th:src 等配合 @{} 表达式。</p><h3 id="3、编写-LoginController"><a href="#3、编写-LoginController" class="headerlink" title="3、编写 LoginController"></a>3、编写 LoginController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam String userName,</span></span></span><br><span class="line"><span class="function"><span class="params">                        @RequestParam String password,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpSession session,</span></span></span><br><span class="line"><span class="function"><span class="params">                        Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(userName)</span><br><span class="line">            &amp;&amp; !StringUtils.isEmpty(password)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (userName.equals(password)) &#123;</span><br><span class="line">                session.setAttribute(<span class="string">"userName"</span>, userName); <span class="comment">// 用户信息存入session 作用域</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"dashboard"</span>; <span class="comment">// 进入主页面板</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">"errorMsg"</span>, <span class="string">"登录错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>; <span class="comment">// 转发到登录页</span></span><br><span class="line">        <span class="comment">// 由于我们要往登录页面传递反馈数据，所以不能用重定向</span></span><br><span class="line">        <span class="comment">// return "redirect:../index.html"; // 重定向回登录页</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、避免表单重复提交"><a href="#二、避免表单重复提交" class="headerlink" title="二、避免表单重复提交"></a>二、避免表单重复提交</h2><p>当我们进入主页后，再次刷新页面，可能会出现表单重复提交的现象。</p><img src="/2018/12/11/spring-boot-login-interceptor/微信截图_20181211201003.png" title="form"><p>我们可以使用重定向的方法，避免表单重复提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return "dashboard"; // 进入主页面板</span></span><br><span class="line"><span class="comment">// 为了避免表单重复提交，使用重定向</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br></pre></td></tr></table></figure><h2 id="三、登录拦截"><a href="#三、登录拦截" class="headerlink" title="三、登录拦截"></a>三、登录拦截</h2><p>虽然我们实现了 /user/login 请求映射到登录检查方法，但是我们直接访问 /main.html 也是可以进入主页的。所以我们需要实现登录验证。这里使用拦截器的方法实现登录验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String userName = (String) request.getSession().getAttribute(<span class="string">"userName"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(userName)) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">"errorMsg"</span>, <span class="string">"没有权限登录"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 拦截请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在自定义 web mvc 配置类中注册拦截器，并且排除登录请求和静态资源请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">  registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">    .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">    .excludePathPatterns(<span class="string">"/"</span>, <span class="string">"/index.html"</span>, <span class="string">"/user/login"</span>)</span><br><span class="line">    .excludePathPatterns(<span class="string">"/asserts/**"</span>); <span class="comment">// 这里的 /asserts 是 static 目录下的根目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h2><p>当我们盗链访问网页时，会出现没有权限访问的字样。</p><img src="/2018/12/11/spring-boot-login-interceptor/微信截图_20181211210231.png" title="error"><img src="/2018/12/11/spring-boot-login-interceptor/微信截图_20181211210320.png" title="error2"><p>当我们登录信息输入错误时，会回到登录界面，提示登录错误。</p><img src="/2018/12/11/spring-boot-login-interceptor/微信截图_20181211210434.png" title="error3"><p>当我们成功登录后，会重定向进入主页面（避免表单重复提交）。</p><img src="/2018/12/11/spring-boot-login-interceptor/微信截图_20181211210547.png" title="main"><h2 id="五、本文-Demo"><a href="#五、本文-Demo" class="headerlink" title="五、本文 Demo"></a>五、本文 Demo</h2><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_005-spring-boot-login-interceptor" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></p><h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><ul><li>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li><li><a href="https://blog.csdn.net/weixin_40632733/article/details/81286838" rel="external nofollow noopener noreferrer" target="_blank">springboot2.0+配置拦截器拦截静态资源的问题</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;一、准备工作&lt;/h2&gt;&lt;p&gt;首先确保工程引入了 starter-web 和 thymeleaf 依赖。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 自定义错误数据</title>
    <link href="https://calvinhwang123.github.io/2018/12/11/spring-boot-customize-error/"/>
    <id>https://calvinhwang123.github.io/2018/12/11/spring-boot-customize-error/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2018-12-13T13:23:47.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Spring-Boot-默认错误处理机制"><a href="#一、Spring-Boot-默认错误处理机制" class="headerlink" title="一、Spring Boot 默认错误处理机制"></a>一、Spring Boot 默认错误处理机制</h2><h3 id="1、浏览器访问"><a href="#1、浏览器访问" class="headerlink" title="1、浏览器访问"></a>1、浏览器访问</h3><p>浏览器返回一个默认的错误页面。</p><a id="more"></a><img src="/2018/12/11/spring-boot-customize-error/微信截图_20181212211613.png" title="browser"><h3 id="2、移动端访问（PostMan模拟）"><a href="#2、移动端访问（PostMan模拟）" class="headerlink" title="2、移动端访问（PostMan模拟）"></a>2、移动端访问（PostMan模拟）</h3><p>移动端默认访问 json 数据</p><img src="/2018/12/11/spring-boot-customize-error/微信截图_20181212211816.png" title="app"><h3 id="3、原理"><a href="#3、原理" class="headerlink" title="3、原理"></a>3、原理</h3><p>可以参照 ErrorMvcAutoConfiguration，错误处理的自动配置类。</p><p><code>ErrorMvcAutoConfiguration</code> 给容器中添加了以下组件：</p><ol><li>DefaultErrorAttributes：</li><li>BasicErrorController：处理默认的 /error 请求</li><li>ErrorPageCustomizer：</li><li>DefaultErrorViewResolver：</li></ol><p>步骤：一旦系统出现 4xx 或 5xx 之类的错误，ErrorPageCustomizer 就会生效（定制错误的响应规则），就会来到 /error 请求，被 BasicErrorController 处理。</p><h2 id="二、如何定制错误响应"><a href="#二、如何定制错误响应" class="headerlink" title="二、如何定制错误响应"></a>二、如何定制错误响应</h2><h3 id="1、定制错误页面"><a href="#1、定制错误页面" class="headerlink" title="1、定制错误页面"></a>1、定制错误页面</h3><p>如果是简单的定制错误页面，我们只需要在 templates 目录下，新建名为 error 的目录，再命名文件名为状态码即可，如 <code>404.html</code>。为了统一处理错误页面，我们可以只建立 <code>4xx.html</code> 和 <code>5xx.html</code> 的文件。</p><img src="/2018/12/11/spring-boot-customize-error/微信截图_20181213210254.png" title="error"><p>如果使用了 Thymeleaf 模板引擎，还可以取出 status， timestamp，error，exception 等错误信息。</p><h3 id="2、自定义错误信息"><a href="#2、自定义错误信息" class="headerlink" title="2、自定义错误信息"></a>2、自定义错误信息</h3><p>首先我们来编写自定义错误类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserNotFoundException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"用户不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后自定义错误处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这样子浏览器和移动端都是返回 json 数据</span></span><br><span class="line">    <span class="comment">/*@ExceptionHandler(UserNotFoundException.class)</span></span><br><span class="line"><span class="comment">    @ResponseBody</span></span><br><span class="line"><span class="comment">    public Map&lt;String, Object&gt; handleException() &#123;</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; errorMap = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">        errorMap.put("code", "notfound");</span></span><br><span class="line"><span class="comment">        errorMap.put("message", "找不到对象");</span></span><br><span class="line"><span class="comment">        return errorMap;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotFoundException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">500</span>);</span><br><span class="line">        Map&lt;String, Object&gt; errorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        errorMap.put(<span class="string">"code"</span>, <span class="string">"notfound"</span>);</span><br><span class="line">        errorMap.put(<span class="string">"message"</span>, <span class="string">"找不到对象"</span>);</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">"extMap"</span>, errorMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在handleException() 方法中传入了 HttpServletRequest 参数，在指定了 status_code 的前提下，往 request 域中存放了 自定义错误信息，最后转发到 /error 请求。</p><p>接下来我们要做的是自定义 ErrorAttributes 类，并且注册成为 component。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">"extMap"</span>, webRequest.getAttribute(<span class="string">"extMap"</span>, WebRequest.SCOPE_REQUEST));</span><br><span class="line">        map.put(<span class="string">"company"</span>, <span class="string">"闲鹿科技"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子 ErrorMvcAutoConfiguration 也会把我们自定义的 attributes 放入 错误信息的 Map 中。</p><p>最后我们使用浏览器和 POSTMAN 测试一下。</p><img src="/2018/12/11/spring-boot-customize-error/微信截图_20181213211452.png" title="test"><p>我们发现浏览器响应的是自定义错误页面，POSTMAN 响应的是自定义错误 JSON 数据。</p><h2 id="三、本文-Demo"><a href="#三、本文-Demo" class="headerlink" title="三、本文 Demo"></a>三、本文 Demo</h2><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_006-spring-boot-customize-error" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></p><h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><ul><li>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Spring-Boot-默认错误处理机制&quot;&gt;&lt;a href=&quot;#一、Spring-Boot-默认错误处理机制&quot; class=&quot;headerlink&quot; title=&quot;一、Spring Boot 默认错误处理机制&quot;&gt;&lt;/a&gt;一、Spring Boot 默认错误处理机制&lt;/h2&gt;&lt;h3 id=&quot;1、浏览器访问&quot;&gt;&lt;a href=&quot;#1、浏览器访问&quot; class=&quot;headerlink&quot; title=&quot;1、浏览器访问&quot;&gt;&lt;/a&gt;1、浏览器访问&lt;/h3&gt;&lt;p&gt;浏览器返回一个默认的错误页面。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 实现页面国际化</title>
    <link href="https://calvinhwang123.github.io/2018/12/10/spring-boot-i18n/"/>
    <id>https://calvinhwang123.github.io/2018/12/10/spring-boot-i18n/</id>
    <published>2018-12-09T16:00:00.000Z</published>
    <updated>2018-12-11T14:52:47.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、效果图"><a href="#一、效果图" class="headerlink" title="一、效果图"></a>一、效果图</h2><p>使用 Spring Boot 实现页面国际化非常简单，以下是实现的效果图：</p><a id="more"></a><img src="/2018/12/10/spring-boot-i18n/i18n-webapp.gif" title="i18n"><p>以下我们就针对 Spring Boot 2 和 Spring Boot 1.5 分别自定义 配置类实现页面国际化。</p><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><p>首先确保你新建的项目是 WEB 工程。我们以 IDEA 构建 MAVEN 工程为例。</p><p>以下是 pom.xml 配置，主要导入了 starter-web 和 thymeleaf 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shinedeer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-1-i18n<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-1-i18n<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--记得改成 thymeleaf 3+ layout 2+--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 布局功能的支持程序 thymeleaf3 主程序 layout2 以上版本 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其次是编写 .properties 文件实现国际化关键字的配置</p><img src="/2018/12/10/spring-boot-i18n/微信截图_20181210230532.png" title="properties"><p>使用 Spring Boot 实现国际化如此简单，主要是因为 MessageResourceAutoConfiguration 自动配置类为我们完成了国际化资源文件的加载与配置。</p><img src="/2018/12/10/spring-boot-i18n/微信截图_20181210231028.png" title="auto"><p>因此，我们在全局配置文件 application.properties (yml) 下添加自定义配置</p><img src="/2018/12/10/spring-boot-i18n/微信截图_20181210231305.png" title="app"><p>这样子，MessageResourceAutoConfiguration 便会帮我们根据用户实时浏览器或操作系统语言去加载不同语言的配置文件 (siri_xx_XX.properties)</p><p>然后我们编写 Thymeleaf 语法驱动的 html 页面，这里使用到了 国际化表达式 #{ keyword } 和 URL 表达式 @{ url } 。具体的使用可以参照 <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" rel="external nofollow noopener noreferrer" target="_blank">Thymeleaf 文档</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>[[#&#123; siri.title &#125;]]<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123; /ask(lang='en_US') &#125;"</span>&gt;</span>Siri<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123; /ask(lang='zh_CN') &#125;"</span>&gt;</span>希瑞<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123; /ask(lang='zh_TW') &#125;"</span>&gt;</span>希瑞(繁中)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123; siri.ask &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123; siri.answer1 &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 480px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123; siri.answer2 &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由以上页面可知，我们使用 a 标签，附加 <code>lang=语言标识</code> 的请求参数的 GET 方法向后台提交切换语言的请求。</p><h2 id="三、后台处理"><a href="#三、后台处理" class="headerlink" title="三、后台处理"></a>三、后台处理</h2><p>后台处理的思路是：通过自定义 LocaleResolver ，从 request 域 中取出语言标识，并实现对语言的重新设置与解析。然后再把自定义 LocalResolver 通过 @Bean 注解注入到自定义 mvc 配置类中。</p><p>只不过在自定义 mvc 配置类时候，Spring Boot2 不推荐使用 extends WebMvcConfigurerAdapter 的方式了。所以我们改用 implements WebMvcConfigurer 的方式自定义 mvc 配置类，注入 LocaleChangeInterceptor 拦截器实例，并且在 addInterceptors 方法中注册拦截器。</p><h3 id="1、自定义-LocaleResolver-组件"><a href="#1、自定义-LocaleResolver-组件" class="headerlink" title="1、自定义 LocaleResolver 组件"></a>1、自定义 LocaleResolver 组件</h3><img src="/2018/12/10/spring-boot-i18n/微信截图_20181210233344.png" title="locale"><h3 id="2、Spring-Boot-1-5-自定义-mvc-配置类"><a href="#2、Spring-Boot-1-5-自定义-mvc-配置类" class="headerlink" title="2、Spring Boot 1.5 自定义 mvc 配置类"></a>2、Spring Boot 1.5 自定义 mvc 配置类</h3><img src="/2018/12/10/spring-boot-i18n/微信截图_20181210233500.png" title="web"><h3 id="3、Spring-Boot-2-自定义-mvc-配置类"><a href="#3、Spring-Boot-2-自定义-mvc-配置类" class="headerlink" title="3、Spring Boot 2 自定义 mvc 配置类"></a>3、Spring Boot 2 自定义 mvc 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Calvin Hwang</span></span><br><span class="line"><span class="comment"> * 2018/11/26 19:30</span></span><br><span class="line"><span class="comment"> * 实现 WebMvcConfigurer 接口的自定义配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// @Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig2</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SessionLocaleResolver slr = <span class="keyword">new</span> SessionLocaleResolver();</span><br><span class="line">        <span class="comment">// slr.setDefaultLocale(Locale.US); // 这边在中文操作系统或者说中文浏览器下无效？</span></span><br><span class="line">        <span class="keyword">return</span> slr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleChangeInterceptor <span class="title">localeChangeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocaleChangeInterceptor lci = <span class="keyword">new</span> LocaleChangeInterceptor();</span><br><span class="line">        lci.setParamName(<span class="string">"lang"</span>);</span><br><span class="line">        <span class="keyword">return</span> lci;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(localeChangeInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于以上我们 在 Spring Boot 1.5 的 MyMvcConfig 类中重写了 addViewControllers 时使用 registry 添加了 /ask 路径映射与跳转，所以不需要编写 Controller 层即可实现简单国际化测试。Spring Boot 2 的自定义配置类同理不再赘述。</p><h3 id="4、运行测试"><a href="#4、运行测试" class="headerlink" title="4、运行测试"></a>4、运行测试</h3><p>此时在浏览器运行测试，即可实现页面国际化切换。</p><img src="/2018/12/10/spring-boot-i18n/微信截图_20181211000159.png" title="cn"><img src="/2018/12/10/spring-boot-i18n/微信截图_20181211000247.png" title="en"><h2 id="四、本文-Demo"><a href="#四、本文-Demo" class="headerlink" title="四、本文 Demo"></a>四、本文 Demo</h2><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/spring-boot-1-i18n" rel="external nofollow noopener noreferrer" target="_blank">spring-boot-1-i18n</a></p><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/spring-boot-full-learning" rel="external nofollow noopener noreferrer" target="_blank">spring-boot-2-i18n</a></p><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h2><ul><li>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li><li><a href="https://www.baeldung.com/spring-boot-internationalization" rel="external nofollow noopener noreferrer" target="_blank">Guide to Internationalization in Spring Boot</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、效果图&quot;&gt;&lt;a href=&quot;#一、效果图&quot; class=&quot;headerlink&quot; title=&quot;一、效果图&quot;&gt;&lt;/a&gt;一、效果图&lt;/h2&gt;&lt;p&gt;使用 Spring Boot 实现页面国际化非常简单，以下是实现的效果图：&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 WEB 开发</title>
    <link href="https://calvinhwang123.github.io/2018/12/10/spring-boot-web/"/>
    <id>https://calvinhwang123.github.io/2018/12/10/spring-boot-web/</id>
    <published>2018-12-09T16:00:00.000Z</published>
    <updated>2018-12-11T14:54:24.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>使用 Spring Boot 进行 WEB 开发，只需要进行以下三步：</p><a id="more"></a><ol><li>创建 Spring Boot 应用，选中我们需要的模块；</li><li>Spring Boot 已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来；</li><li>自己编写业务代码。</li></ol><p>如果我们要深入研究 Spring Boot 帮我们做了哪些工作，我们需要探究自动配置原理。可以从以下几个方面考虑：</p><p>这个场景 Spring Boot 帮我们配置了什么？</p><p>能不能修改？能修改哪些配置？</p><p>能不能扩展？…</p><p>要研究以上问题，一般从形如 <code>xxxAutoConfiguraion</code> 和 <code>xxxProperties</code> 两个类来考虑</p><p>其中，<code>xxxAutoConfiguraion</code> 帮我们给容器中自动配置组件；而 <code>xxxProperties</code> 配置类用于封装配置文件中的内容。</p><h2 id="二、Spring-Boot-对静态资源的映射规则"><a href="#二、Spring-Boot-对静态资源的映射规则" class="headerlink" title="二、Spring Boot 对静态资源的映射规则"></a>二、Spring Boot 对静态资源的映射规则</h2><ol><li><p>所有的 /webjars/**，都去 classpath:/META-INF/resources/webjars/ 找资源</p><p>webjars: 以 jar 包的方式引入静态资源</p></li><li><p>/** 访问当前项目的任何资源，都去静态资源的文件夹找映射</p></li><li><p>欢迎页：静态资源下的所有 index.html 页面，都被 /** 映射</p></li><li><p>所有的 **/favicon.ico 都在静态资源文件下找。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">  CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache()</span><br><span class="line">    .getCachecontrol().toHttpCacheControl();</span><br><span class="line">  <span class="comment">// 验证第一点</span></span><br><span class="line">  <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">    customizeResourceHandlerRegistration(registry</span><br><span class="line">                                         .addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                         .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                         .setCachePeriod(getSeconds(cachePeriod))</span><br><span class="line">                                         .setCacheControl(cacheControl));</span><br><span class="line">  &#125;</span><br><span class="line">  String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">  <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">    customizeResourceHandlerRegistration(</span><br><span class="line">      registry.addResourceHandler(staticPathPattern)</span><br><span class="line">      .addResourceLocations(getResourceLocations(</span><br><span class="line">        <span class="keyword">this</span>.resourceProperties.getStaticLocations())) <span class="comment">// 验证第二点</span></span><br><span class="line">      .setCachePeriod(getSeconds(cachePeriod))</span><br><span class="line">      .setCacheControl(cacheControl));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 验证第二点</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123;</span><br><span class="line">    <span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>,</span><br><span class="line">      <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String[] locations = getResourceLocations(</span><br><span class="line">    <span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">  <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml)</span><br><span class="line">    .filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>); <span class="comment">// 验证第三点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">  mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">  mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>,</span><br><span class="line">                                             faviconRequestHandler())); <span class="comment">// 验证第四点</span></span><br><span class="line">  <span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Resource&gt; <span class="title">resolveFaviconLocations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String[] staticLocations = getResourceLocations(</span><br><span class="line">    <span class="keyword">this</span>.resourceProperties.getStaticLocations()); <span class="comment">// 验证第四点</span></span><br><span class="line">  List&lt;Resource&gt; locations = <span class="keyword">new</span> ArrayList&lt;&gt;(staticLocations.length + <span class="number">1</span>);</span><br><span class="line">  Arrays.stream(staticLocations).map(<span class="keyword">this</span>.resourceLoader::getResource)</span><br><span class="line">    .forEach(locations::add);</span><br><span class="line">  locations.add(<span class="keyword">new</span> ClassPathResource(<span class="string">"/"</span>));</span><br><span class="line">  <span class="keyword">return</span> Collections.unmodifiableList(locations);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、模板引擎-Thymeleaf"><a href="#三、模板引擎-Thymeleaf" class="headerlink" title="三、模板引擎 Thymeleaf"></a>三、模板引擎 Thymeleaf</h2><p>WEB 开发中模板引擎有多种，如：JSP、Velocity、Freemarker 和 Thymeleaf。</p><img src="/2018/12/10/spring-boot-web/微信截图_20181210195310.png" title="engineer"><p>虽然说模板引擎多种多样，但它们的原理是一样的。都是通过模板引擎将 模板 和 数据 加工成为 html 响应给浏览器。</p><p>Spring Boot 推荐的模板引擎是 Thymeleaf。</p><h3 id="1、引入-Thymeleaf"><a href="#1、引入-Thymeleaf" class="headerlink" title="1、引入 Thymeleaf"></a>1、引入 Thymeleaf</h3><p>我们推荐使用 Thymeleaf 3。如果你的默认不是 Thymeleaf 3，可以通过以下配置切换：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--记得改成 thymeleaf 3+ layout 2+--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上 ThymeleafProperties 配置类可知，我们需要把使用 Thymeleaf 语法的 html 页面放在 /templates/ 目录下。</p><h3 id="2、使用-Thymeleaf"><a href="#2、使用-Thymeleaf" class="headerlink" title="2、使用 Thymeleaf"></a>2、使用 Thymeleaf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/greeting"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greeting</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="string">"name"</span>, <span class="string">"Calvin"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123; name &#125;"</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Spring-MVC-自动配置原理"><a href="#四、Spring-MVC-自动配置原理" class="headerlink" title="四、Spring MVC 自动配置原理"></a>四、Spring MVC 自动配置原理</h2><p>可以参考官网</p><p><a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p><p>Spring Boot 自动配置好了 Spring MVC。</p><p>以下是 Spring Boot 通过 WebMvcAutoConfiguration 对 Spring MVC 的默认配置</p><ul><li>包含了两个 bean： <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code>.<ul><li>自动配置了 ViewResolver (即视图解析器，根据方法的返回值得到视图对象，视图对象决定如何渲染，如转发，重定向)。</li><li>ContentNegotiatingViewResolver，组合所有的视图解析器</li><li>如何定制视图解析器：我们可以自己给容器中添加一个视图解析器，ContentNegotiatingViewResolver 会自动将其组合进来。</li></ul></li><li>提供静态资源访问，包括 webjars。</li><li>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</li><li>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-message-converters" rel="external nofollow noopener noreferrer" target="_blank">later in this document</a>).</li><li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-spring-message-codes" rel="external nofollow noopener noreferrer" target="_blank">later in this document</a>).</li><li>静态首页 <code>index.html</code> 支持.</li><li>自定义<code>Favicon</code> 图标支持(covered <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-favicon" rel="external nofollow noopener noreferrer" target="_blank">later in this document</a>).</li><li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-web-binding-initializer" rel="external nofollow noopener noreferrer" target="_blank">later in this document</a>).</li></ul><p>If you want to keep Spring Boot MVC features and you want to add additional <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc" rel="external nofollow noopener noreferrer" target="_blank">MVC configuration</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, you can declare a <code>WebMvcRegistrationsAdapter</code> instance to provide such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h2 id="五、本文-Demo"><a href="#五、本文-Demo" class="headerlink" title="五、本文 Demo"></a>五、本文 Demo</h2><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_004-spring-boot-web" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></p><h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><ul><li>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;使用 Spring Boot 进行 WEB 开发，只需要进行以下三步：&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Activiti 5.x 工作流</title>
    <link href="https://calvinhwang123.github.io/2018/12/07/activiti-tutorial/"/>
    <id>https://calvinhwang123.github.io/2018/12/07/activiti-tutorial/</id>
    <published>2018-12-06T16:00:00.000Z</published>
    <updated>2018-12-09T12:21:38.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、第一天"><a href="#一、第一天" class="headerlink" title="一、第一天"></a>一、第一天</h2><blockquote><p> 工作流技术绝对是找工作亮点，如果你会这个，“我”估计这工作百分之五十是成了。</p></blockquote><a id="more"></a><h3 id="1、Activiti-入门"><a href="#1、Activiti-入门" class="headerlink" title="1、Activiti 入门"></a>1、Activiti 入门</h3><h4 id="1-1-工作流概念"><a href="#1-1-工作流概念" class="headerlink" title="1-1 工作流概念"></a>1-1 工作流概念</h4><p>以下是一段关于工作流概念的说明：</p><blockquote><p>工作流(Workflow) 是 <strong>业务过程的部分或整体在计算机应用环境下的自动化</strong>，它主要解决了<strong>多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促使此目标实现</strong>。</p></blockquote><h4 id="1-2-Activiti-介绍"><a href="#1-2-Activiti-介绍" class="headerlink" title="1-2 Activiti 介绍"></a>1-2 Activiti 介绍</h4><p>Activiti 5 是由 Alfresco 软件在 2010 年 5 月 17 日 发布的业务流程管理（BPM）框架，它是覆盖了业务流程管理、工作流、服务协作等领域的一个开源、灵活、易扩展的可执行流程语言框架。</p><h4 id="1-3-工作流引擎"><a href="#1-3-工作流引擎" class="headerlink" title="1-3 工作流引擎"></a>1-3 工作流引擎</h4><p>ProcessEngine 对象是 Activiti 工作的核心，负责生成流程运行时的各种实例与数据、监控和管理流程的运行。</p><h4 id="1-4-BPMN"><a href="#1-4-BPMN" class="headerlink" title="1-4 BPMN"></a>1-4 BPMN</h4><p>Business Process Model and Notation，业务流程建模与标注，描述流程的基本符号，包括这些图元如何组成一个业务流程图（Business Process Diagram）</p><h4 id="1-5-数据库"><a href="#1-5-数据库" class="headerlink" title="1-5 数据库"></a>1-5 数据库</h4><p>Activiti的后台是有数据库的支持，所有的表（23张）都以ACT_开头。 第二部分是表示表的用途的两个字母标识。 用途也和服务的API对应。</p><ul><li>ACT_RE_*: ‘RE’表示repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</li></ul><ul><li>ACT_RU_*: ‘RU’表示runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小，速度很快。</li></ul><ul><li>ACT_ID_*: ‘ID’表示identity。 这些表包含身份信息，比如用户，组等等。</li></ul><ul><li>ACT_HI_*: ‘HI’表示history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li></ul><ul><li>ACT_GE_*: 通用数据， 用于不同场景下，如存放资源文件。</li></ul><h4 id="1-6-Activiti-步骤简析"><a href="#1-6-Activiti-步骤简析" class="headerlink" title="1-6 Activiti 步骤简析"></a>1-6 Activiti 步骤简析</h4><h5 id="1-6-1-定义工作流"><a href="#1-6-1-定义工作流" class="headerlink" title="1-6-1 定义工作流"></a>1-6-1 定义工作流</h5><p>主要利用 IDE 生成两个文件</p><ul><li>LeaveProcess.bpmn：给计算机进行流程的执行和信息的传递使用</li><li>LeaveProcess.png：给用户看的</li></ul><h5 id="1-6-2-执行和管理工作流"><a href="#1-6-2-执行和管理工作流" class="headerlink" title="1-6-2 执行和管理工作流"></a>1-6-2 执行和管理工作流</h5><ul><li>调用 Activiti 的 API</li></ul><h3 id="2、准备-Activiti-环境"><a href="#2、准备-Activiti-环境" class="headerlink" title="2、准备 Activiti 环境"></a>2、准备 Activiti 环境</h3><h4 id="2-1-环境约束"><a href="#2-1-环境约束" class="headerlink" title="2-1 环境约束"></a>2-1 环境约束</h4><ol><li>JDK1.6 或者更高版本</li><li>支持的数据库有：h2, mysql, oracle, postgres, mssql, db2 等。 </li><li>支持 activiti5 运行的 jar 包</li><li>开发环境为 Eclipse3.7 或者以上版本, myeclipse 为 8.6 版本</li></ol><h4 id="2-2-安装流程设计器（IDEA-插件）"><a href="#2-2-安装流程设计器（IDEA-插件）" class="headerlink" title="2-2 安装流程设计器（IDEA 插件）"></a>2-2 安装流程设计器（IDEA 插件）</h4><p>安装详情参考此文 <a href="https://blog.csdn.net/gozhuyinglong/article/details/80336765" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ IDEA安装Activiti插件并使用</a></p><h3 id="3、第一章：Activiti-入门程序——Hello-World"><a href="#3、第一章：Activiti-入门程序——Hello-World" class="headerlink" title="3、第一章：Activiti 入门程序——Hello World"></a>3、第一章：Activiti 入门程序——Hello World</h3><h4 id="3-1-使用-IDEA-创建-Maven-工程"><a href="#3-1-使用-IDEA-创建-Maven-工程" class="headerlink" title="3-1 使用 IDEA 创建 Maven 工程"></a>3-1 使用 IDEA 创建 Maven 工程</h4><p>pom.xml 如下（可根据自身需要自己调节 version）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shinedeer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti.version</span>&gt;</span>5.17.0<span class="tag">&lt;/<span class="name">activiti.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JUnit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- activiti --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql database --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>activitiDemo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-使用-acitiviti-cfg-xml-创建-23-张表"><a href="#3-2-使用-acitiviti-cfg-xml-创建-23-张表" class="headerlink" title="3-2 使用 acitiviti.cfg.xml 创建 23 张表"></a>3-2 使用 acitiviti.cfg.xml 创建 23 张表</h4><p>配置文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接数据的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/myactiviti?useUnicode=true&amp;amp;characterEncoding=utf8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 没有表创建表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-创建数据库-myactiviti"><a href="#3-3-创建数据库-myactiviti" class="headerlink" title="3-3 创建数据库 myactiviti"></a>3-3 创建数据库 myactiviti</h4><img src="/2018/12/07/activiti-tutorial/微信截图_20181207225659.png" title="db"><h4 id="3-4-编写测试类"><a href="#3-4-编写测试类" class="headerlink" title="3-4 编写测试类"></a>3-4 编写测试类</h4><p>我们使用 ProcessEngine 配置类去加载 classpath 下的 配置文件，并构建出 ProcessEngine 对象。此时会系统会自动创建出 Activiti 流程需要的 23 张表。</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181207230018.png" title="test"><p>运行通过后，再 F5 一下我们的数据库（别问我为什么是 24 张表，T^T，我只知道我 Maven 依赖的是 <strong>Activiti 5.17</strong>）</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181207230259.png" title="table"><h4 id="3-5-使用-actiBPM-插件绘制流程图"><a href="#3-5-使用-actiBPM-插件绘制流程图" class="headerlink" title="3-5 使用 actiBPM 插件绘制流程图"></a>3-5 使用 actiBPM 插件绘制流程图</h4><p>确保我们已经安装了 IDEA 插件 actiBPM，依次 File / New / bpmnFile，新建一个 helloworld.bpmn</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208092905.png" title="bpmn"><p>每一个工作流都有 StartEvent 和 EndEvent，并且至少有两个 UserTask。</p><p>我们使用以下操作来修改 bpmn 流程图：双击 UserTask 修改 name，鼠标悬浮 Event 或 Task 图标，当出现小人物图标是拖拽至下一个节点，即可出现连接线并完成连接，效果图如下：</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208094321.png" title="task"><p>然后我们选择某个 UserTask，在左侧 BPMN Editor 面板中，除了我们双击时修改的Name属性之外，还看到了一个 Assignee，表示<code>代理人，被指定人</code>，我们依次在三个 UserTask 的 Assignee 属性填写 张三，李四 和 王五。</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208094653.png" title="zhangsan"><p>我们再点击空白处，为整个 Process 的 id 和 name 属性赋值</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208095257.png" title="process"><p>最后再把 bpmn 文件 refactor / rename 成 xml 文件。并且 导出 png 图片</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208100333.png" title="diagrams"><img src="/2018/12/07/activiti-tutorial/微信截图_20181208100514.png" title="png"><p>解决乱码问题</p><p>在 IDEA 安装路径下找到如下文件并添加 字符集 配置</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208100810.png" title="utf8"><p>最后重启 IDEA，可以解决 xml 和导出图片乱码问题</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208101311.png" title="restart"><h4 id="3-6-HelloWorld-模拟流程执行过程"><a href="#3-6-HelloWorld-模拟流程执行过程" class="headerlink" title="3-6 HelloWorld 模拟流程执行过程"></a>3-6 HelloWorld 模拟流程执行过程</h4><h5 id="3-6-1-测试部署流程定义"><a href="#3-6-1-测试部署流程定义" class="headerlink" title="3-6-1 测试部署流程定义"></a>3-6-1 测试部署流程定义</h5><img src="/2018/12/07/activiti-tutorial/微信截图_20181208103529.png" title="deployment"><p>数据库相关表也有了记录</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208103700.png" title="table"><h5 id="3-6-2-测试流程实例"><a href="#3-6-2-测试流程实例" class="headerlink" title="3-6-2 测试流程实例"></a>3-6-2 测试流程实例</h5><img src="/2018/12/07/activiti-tutorial/微信截图_20181208110429.png" title="process"><img src="/2018/12/07/activiti-tutorial/微信截图_20181208110602.png" title="execute"><h5 id="3-6-3-测试当前任务执行人"><a href="#3-6-3-测试当前任务执行人" class="headerlink" title="3-6-3 测试当前任务执行人"></a>3-6-3 测试当前任务执行人</h5><img src="/2018/12/07/activiti-tutorial/微信截图_20181208112415.png" title="task"><h5 id="3-6-4-测试完成个人任务"><a href="#3-6-4-测试完成个人任务" class="headerlink" title="3-6-4 测试完成个人任务"></a>3-6-4 测试完成个人任务</h5><img src="/2018/12/07/activiti-tutorial/微信截图_20181208113325.png" title="complete"><p>从数据库表记录截图可以看到，当前办理人 张三 已经完成了任务，任务自然到了下一个办理人 部门经理。</p><p>我们如法炮制地执行 李四 和 王五 的任务，此时再查看 act_ru_task ，已经没有实时记录了，但是在 历史表中可以查看流程执行记录。</p><img src="/2018/12/07/activiti-tutorial/微信截图_20181208115403.png" title="history"><h3 id="4、第二章：流程定义-CRUD"><a href="#4、第二章：流程定义-CRUD" class="headerlink" title="4、第二章：流程定义 CRUD"></a>4、第二章：流程定义 CRUD</h3><h4 id="4-1-使用-Zip-文件部署流程定义"><a href="#4-1-使用-Zip-文件部署流程定义" class="headerlink" title="4-1 使用 Zip 文件部署流程定义"></a>4-1 使用 Zip 文件部署流程定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiviti2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  加载 zip 文件部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeploymentProcessDefinitionByZip</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ZipInputStream inputStream = <span class="keyword">new</span> ZipInputStream(</span><br><span class="line">            getClass().getClassLoader()</span><br><span class="line">                .getResourceAsStream(<span class="string">"diagrams/helloworld.zip"</span>));</span><br><span class="line"></span><br><span class="line">        Deployment deployment = processEngine.getRepositoryService()</span><br><span class="line">            .createDeployment()</span><br><span class="line">            .name(<span class="string">"测试部署流程定义"</span>)</span><br><span class="line">            .addZipInputStream(inputStream)</span><br><span class="line">            .deploy();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"部署 id："</span> + deployment.getId());</span><br><span class="line">        System.out.println(<span class="string">"部署 name："</span> + deployment.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-查看流程定义"><a href="#4-2-查看流程定义" class="headerlink" title="4-2 查看流程定义"></a>4-2 查看流程定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryProcessDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;ProcessDefinition&gt; processDefinitionList = processEngine.getRepositoryService()</span><br><span class="line">    .createProcessDefinitionQuery()</span><br><span class="line">    .list();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (ProcessDefinition processDefinition: processDefinitionList) &#123;</span><br><span class="line">    System.out.println(<span class="string">"流程定义 id："</span> + processDefinition.getId());</span><br><span class="line">    System.out.println(<span class="string">"流程定义 名称："</span> + processDefinition.getName());</span><br><span class="line">    System.out.println(<span class="string">"流程定义 KEY："</span> + processDefinition.getKey());</span><br><span class="line">    System.out.println(<span class="string">"流程定义 版本："</span> + processDefinition.getVersion());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-删除流程定义"><a href="#4-3-删除流程定义" class="headerlink" title="4-3 删除流程定义"></a>4-3 删除流程定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteProcessDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  processEngine.getRepositoryService()</span><br><span class="line">    .deleteDeployment(<span class="string">"1"</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、第三章：流程实例、任务的执行"><a href="#5、第三章：流程实例、任务的执行" class="headerlink" title="5、第三章：流程实例、任务的执行"></a>5、第三章：流程实例、任务的执行</h3><p>参见 <a href="">3-6</a></p><h3 id="6、第四章：流程变量"><a href="#6、第四章：流程变量" class="headerlink" title="6、第四章：流程变量"></a>6、第四章：流程变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动流程实例(并且 设置流程变量)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcessInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Map&lt;String, Object&gt; variableMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  variableMap.put(<span class="string">"请假天数"</span>, <span class="number">3</span>);</span><br><span class="line">  variableMap.put(<span class="string">"请假原因"</span>, <span class="string">"祖国未统一，心情很郁闷"</span>);</span><br><span class="line">  variableMap.put(<span class="string">"请假时间"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">  processEngine.getRuntimeService()</span><br><span class="line">    .startProcessInstanceByKey(<span class="string">"helloworld"</span>, variableMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置请假人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAssignee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String taskId = <span class="string">"5001"</span>;</span><br><span class="line">  processEngine.getRuntimeService()</span><br><span class="line">    .setVariable(taskId, <span class="string">"请假人"</span>, <span class="string">"小明"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、第五章：查看历史记录"><a href="#7、第五章：查看历史记录" class="headerlink" title="7、第五章：查看历史记录"></a>7、第五章：查看历史记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryHistoryVariable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;HistoricVariableInstance&gt; list = processEngine.getHistoryService()</span><br><span class="line">    .createHistoricVariableInstanceQuery()</span><br><span class="line">    .variableName(<span class="string">"请假人"</span>)</span><br><span class="line">    .list();</span><br><span class="line">  <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (HistoricVariableInstance historicVariableInstance: list) &#123;</span><br><span class="line">      System.out.println(<span class="string">"变量名："</span> + historicVariableInstance.getVariableName());</span><br><span class="line">      System.out.println(<span class="string">"变量值："</span> + historicVariableInstance.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、第二天"><a href="#二、第二天" class="headerlink" title="二、第二天"></a>二、第二天</h2><h3 id="1、第六章：连线"><a href="#1、第六章：连线" class="headerlink" title="1、第六章：连线"></a>1、第六章：连线</h3><h3 id="2、第七章：活动节点（-）"><a href="#2、第七章：活动节点（-）" class="headerlink" title="2、第七章：活动节点（*）"></a>2、第七章：活动节点（<strong>*</strong>）</h3><h3 id="3、Activities-5-4-整合-SSH"><a href="#3、Activities-5-4-整合-SSH" class="headerlink" title="3、Activities 5.4 整合 SSH"></a>3、Activities 5.4 整合 SSH</h3><h2 id="三、第三、四天"><a href="#三、第三、四天" class="headerlink" title="三、第三、四天"></a>三、第三、四天</h2><h3 id="1、项目实现-Activiti-工作流——请假流程管理系统"><a href="#1、项目实现-Activiti-工作流——请假流程管理系统" class="headerlink" title="1、项目实现 Activiti 工作流——请假流程管理系统"></a>1、项目实现 Activiti 工作流——请假流程管理系统</h3><h2 id="四、本文Demo"><a href="#四、本文Demo" class="headerlink" title="四、本文Demo"></a>四、本文Demo</h2><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/activitidemo" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></p><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h2><ul><li>传智播客 <a href="http://www.itcast.cn/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li><li><a href="https://blog.csdn.net/gozhuyinglong/article/details/80336765" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ IDEA安装Activiti插件并使用</a></li><li><a href="https://www.jianshu.com/p/e8fcdedbfabe" rel="external nofollow noopener noreferrer" target="_blank">Activiti + Spring开发环境搭建</a></li><li><a href="https://www.bilibili.com/video/av36668918" rel="external nofollow noopener noreferrer" target="_blank">Activiti 视频教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、第一天&quot;&gt;&lt;a href=&quot;#一、第一天&quot; class=&quot;headerlink&quot; title=&quot;一、第一天&quot;&gt;&lt;/a&gt;一、第一天&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; 工作流技术绝对是找工作亮点，如果你会这个，“我”估计这工作百分之五十是成了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Activiti" scheme="https://calvinhwang123.github.io/categories/Activiti/"/>
    
    
      <category term="Activiti" scheme="https://calvinhwang123.github.io/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 日志</title>
    <link href="https://calvinhwang123.github.io/2018/12/06/spring-boot-logging/"/>
    <id>https://calvinhwang123.github.io/2018/12/06/spring-boot-logging/</id>
    <published>2018-12-05T16:00:00.000Z</published>
    <updated>2018-12-09T11:04:32.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、日志门面与日志实现"><a href="#一、日志门面与日志实现" class="headerlink" title="一、日志门面与日志实现"></a>一、日志门面与日志实现</h2><p>市场上存在非常多的日志框架，如：<code>JUL(java.util.logging)</code>、<code>JCL(Apache Commons Logging)</code>、<code>Log4j</code>、<code>Log4j2</code>、<code>Logback</code>、<code>slf4j</code>和<code>jboss-logging</code>等。spring-boot-starter-logging 采用了 slf4j + logback 的形式，Spring Boot 也能自动配置 (JUL, log4j2, logback) 并简化配置。</p><a id="more"></a><p>以上几款日志框架分为日志门面与日志实现，关系大致如下：</p><table><thead><tr><th>日志门面</th><th>日志实现</th></tr></thead><tbody><tr><td>JCL, slf4j, jboss-logging</td><td>JUL, log4j, log4j2, logback</td></tr></tbody></table><h2 id="二、Spring-Boot-默认日志实现"><a href="#二、Spring-Boot-默认日志实现" class="headerlink" title="二、Spring Boot 默认日志实现"></a>二、Spring Boot 默认日志实现</h2><p>我们新建一个最简单 Spring Boot Maven 工程，使用 IDEA 生成 Maven 依赖树如下：</p><img src="/2018/12/06/spring-boot-logging/微信截图_20181206200830.png" title="logging"><p>我们可以看到，spring-boot-start 依赖了 spring-boot-start-logging ，而不管是 log4j ，jul 还是 logback，最终都实现了 slf4j 门面。</p><p>对于如何将 log4j， jul 等转换为 slf4 实现，可以参考 slf4j <a href="https://www.slf4j.org/manual.html" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p><p><img src="https://www.slf4j.org/images/concrete-bindings.png" alt="manual"></p><ul><li><p>Spring 框架默认使用 JCL</p></li><li><p>Spring Boot 选用的门面与实现是 slf4j 和 logback</p></li></ul><blockquote><p>Spring Boot 能自动适配所有的日志，而且底层使用的是 slf4j + logback 的方式记录日志，引入其他框架的时候，只要把这个框架依赖的日志框架排除掉即可。</p></blockquote><h2 id="三、Spring-Boot-中日志使用"><a href="#三、Spring-Boot-中日志使用" class="headerlink" title="三、Spring Boot 中日志使用"></a>三、Spring Boot 中日志使用</h2><h3 id="1、日志级别"><a href="#1、日志级别" class="headerlink" title="1、日志级别"></a>1、日志级别</h3><p>Spring Boot slf4j 共有 5 个级别的日志输出，从低到高分别为：track, debug, info, warn, error。默认输出的级别为 info，采用由低到高的过滤方式，因此可以输出的级别为 info, warn 和 error。</p><img src="/2018/12/06/spring-boot-logging/微信截图_20181206202535.png" title="logconsole"><h3 id="2、修改默认日志配置"><a href="#2、修改默认日志配置" class="headerlink" title="2、修改默认日志配置"></a>2、修改默认日志配置</h3><p>我们可以在 application.propertites 内修改日志配置</p><img src="/2018/12/06/spring-boot-logging/微信截图_20181206203352.png" title="level"><p>如图，我们可以修改指定 package 下日志输出级别。</p><p>默认情况下，日志只能在 console 上呈现输出，如果要实现日志的永久保存，我们可以考虑以文件方式存储。使用 logging.file 和 logging.path 来指定文件名和日志路径（一般两个配置不混用）</p><img src="/2018/12/06/spring-boot-logging/微信截图_20181206204253.png" title="logging"><h2 id="四、本文-Demo"><a href="#四、本文-Demo" class="headerlink" title="四、本文 Demo"></a>四、本文 Demo</h2><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_003-spring-boot-logging" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></p><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h2><ul><li>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、日志门面与日志实现&quot;&gt;&lt;a href=&quot;#一、日志门面与日志实现&quot; class=&quot;headerlink&quot; title=&quot;一、日志门面与日志实现&quot;&gt;&lt;/a&gt;一、日志门面与日志实现&lt;/h2&gt;&lt;p&gt;市场上存在非常多的日志框架，如：&lt;code&gt;JUL(java.util.logging)&lt;/code&gt;、&lt;code&gt;JCL(Apache Commons Logging)&lt;/code&gt;、&lt;code&gt;Log4j&lt;/code&gt;、&lt;code&gt;Log4j2&lt;/code&gt;、&lt;code&gt;Logback&lt;/code&gt;、&lt;code&gt;slf4j&lt;/code&gt;和&lt;code&gt;jboss-logging&lt;/code&gt;等。spring-boot-starter-logging 采用了 slf4j + logback 的形式，Spring Boot 也能自动配置 (JUL, log4j2, logback) 并简化配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Git 与 Github 基础</title>
    <link href="https://calvinhwang123.github.io/2018/12/02/git-and-github/"/>
    <id>https://calvinhwang123.github.io/2018/12/02/git-and-github/</id>
    <published>2018-12-01T16:00:00.000Z</published>
    <updated>2018-12-09T12:01:24.560Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下记录自己安装 Git、使用 Git 基础命令向 Github 提交代码以及 IDEA 整合 Git 或 Github 的过程。</p></blockquote><a id="more"></a><h2 id="一、Git-软件"><a href="#一、Git-软件" class="headerlink" title="一、Git 软件"></a>一、Git 软件</h2><h3 id="1、安装-Git-软件"><a href="#1、安装-Git-软件" class="headerlink" title="1、安装 Git 软件"></a>1、安装 Git 软件</h3><p>进入 Git <a href="https://git-scm.com/download/win" rel="external nofollow noopener noreferrer" target="_blank">官网</a>，找到适合自己电脑操作系统的版本进行下载。</p><img src="/2018/12/02/git-and-github/微信截图_20181202131912.png" title="git download"><p>如果没有特殊需求，安装过程一路 Next 到底。</p><h3 id="2、启动-git-bash-窗口"><a href="#2、启动-git-bash-窗口" class="headerlink" title="2、启动 git-bash 窗口"></a>2、启动 git-bash 窗口</h3><p>如图。</p><img src="/2018/12/02/git-and-github/微信截图_20181202132350.png" title="git-bash"><h4 id="2-1-设置全局-username-和-email。"><a href="#2-1-设置全局-username-和-email。" class="headerlink" title="2.1 设置全局 username 和 email。"></a>2.1 设置全局 username 和 email。</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><img src="/2018/12/02/git-and-github/微信截图_20181202133246.png" title="global"><h4 id="2-2-创建版本库"><a href="#2-2-创建版本库" class="headerlink" title="2.2 创建版本库"></a>2.2 创建版本库</h4><p>我们来到一个合适的地方（电脑磁盘路径啦），创建文件夹 learngit，并进入该文件夹</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir learngit</span><br><span class="line">cd learngit</span><br><span class="line">pwd</span><br></pre></td></tr></table></figure><img src="/2018/12/02/git-and-github/微信截图_20181202133744.png" title="learngit"><h4 id="2-3-初始化空仓库"><a href="#2-3-初始化空仓库" class="headerlink" title="2.3 初始化空仓库"></a>2.3 初始化空仓库</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><img src="/2018/12/02/git-and-github/微信截图_20181202133956.png" title="init"><p>我们发现 learngit 文件夹多了一个 .git 的隐藏文件，现在它只是个空仓库</p><h4 id="2-4-添加文件并提交"><a href="#2-4-添加文件并提交" class="headerlink" title="2.4 添加文件并提交"></a>2.4 添加文件并提交</h4><p>使用 git add 命令添加文件，使用 git commit -m “提交注释说明”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add filename.扩展名</span><br><span class="line">git commit -m <span class="string">"提交注释说明"</span></span><br></pre></td></tr></table></figure><img src="/2018/12/02/git-and-github/微信截图_20181202134731.png" title="add"><p>p.s. 我们使用 git commit 只是把文件提交到了本地仓库，以下内容介绍如何提交文件到远程仓库。</p><h2 id="二、Github-远程仓库"><a href="#二、Github-远程仓库" class="headerlink" title="二、Github 远程仓库"></a>二、Github 远程仓库</h2><p>Github 是全球最大的代码管理平台，我们可以通过关联 Github 账号来实现 Git 提交文件到远程仓库。</p><h4 id="3-1-创建远程仓库"><a href="#3-1-创建远程仓库" class="headerlink" title="3.1 创建远程仓库"></a>3.1 创建远程仓库</h4><p>我们在 Github 网站上 new 一个同名的 remote repository.</p><img src="/2018/12/02/git-and-github/微信截图_20181202135653.png" title="remote"><img src="/2018/12/02/git-and-github/微信截图_20181202140005.png" title="new"><p>根据创建远程仓库成功后的提示，我们使用以下命令提交文件到远程仓库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:yourusername/learngit.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><img src="/2018/12/02/git-and-github/微信截图_20181202140349.png" title="push"><p>如图所示，我们提交过程中可能出现提交失败的情况，这是因为手上的这台电脑并没有提交 RSA key 到 Github 上，认证失败了。</p><h4 id="3-2-创建-RSA-key"><a href="#3-2-创建-RSA-key" class="headerlink" title="3.2 创建 RSA key"></a>3.2 创建 RSA key</h4><p>在 git-bash 窗口，使用以下命令查看电脑是否存在 RSA key</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><img src="/2018/12/02/git-and-github/微信截图_20181202141304.png" title="ssh"><blockquote><p>我们需要寻找一对以 <code>id_dsa</code> 或 <code>id_rsa</code> 命名的文件，其中一个带有 <code>.pub</code> 扩展名。 <code>.pub</code> 文件是你的公钥，另一个则是私钥。 </p></blockquote><p>如果找不到这样的文件（或者根本没有 <code>.ssh</code> 目录），表示你的电脑还没有生成密钥</p><p>使用 ssh-keygen命名生成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>该命令要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可，可以直接按 enter 键生成</p><img src="/2018/12/02/git-and-github/微信截图_20181202141603.png" title="keygen"><img src="/2018/12/02/git-and-github/微信截图_20181202141843.png" title="ssh"><p>点击 Github 右上角图标，选择 settings / ssh and gpg keys / new ssh key</p><img src="/2018/12/02/git-and-github/微信截图_20181202140723.png" title="create key"><p>然后把 id_rsa.pub 内容添加到 Github 上即可。</p><img src="/2018/12/02/git-and-github/微信截图_20181202142048.png" title="pub"><h4 id="3-3-提交到远程仓库"><a href="#3-3-提交到远程仓库" class="headerlink" title="3.3 提交到远程仓库"></a>3.3 提交到远程仓库</h4><p>现在再来使用 git remote add 和 git push 提交文件就没问题了。</p><img src="/2018/12/02/git-and-github/微信截图_20181202142640.png" title="remote"><img src="/2018/12/02/git-and-github/微信截图_20181202142910.png" title="hello"><h4 id="3-4-从远程仓库克隆"><a href="#3-4-从远程仓库克隆" class="headerlink" title="3.4 从远程仓库克隆"></a>3.4 从远程仓库克隆</h4><p>使用 git clone 克隆远程仓库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:CalvinHwang123/learngit.git</span><br></pre></td></tr></table></figure><img src="/2018/12/02/git-and-github/微信截图_20181202143551.png" title="clone"><h2 id="三、IDEA-整合-Git"><a href="#三、IDEA-整合-Git" class="headerlink" title="三、IDEA 整合 Git"></a>三、IDEA 整合 Git</h2><h3 id="3-1-配置-git-exe-路径"><a href="#3-1-配置-git-exe-路径" class="headerlink" title="3.1 配置 git.exe 路径"></a>3.1 配置 git.exe 路径</h3><p>在 IDEA 左上角工具栏，依次选择 file / other settings / default settings / version control / git</p><img src="/2018/12/02/git-and-github/微信截图_20181202144154.png" title="git"><h3 id="3-2-初始化本地仓库"><a href="#3-2-初始化本地仓库" class="headerlink" title="3.2 初始化本地仓库"></a>3.2 初始化本地仓库</h3><p>这里把项目所在 Project Location 初始化成本地仓库</p><img src="/2018/12/02/git-and-github/微信截图_20181202144949.png" title="local"><h3 id="3-3-创建-Github-远程仓库"><a href="#3-3-创建-Github-远程仓库" class="headerlink" title="3.3 创建 Github 远程仓库"></a>3.3 创建 Github 远程仓库</h3><img src="/2018/12/02/git-and-github/微信截图_20181202151746.png" title="github"><h3 id="3-4-在-IDEA-下使用-Git-操作项"><a href="#3-4-在-IDEA-下使用-Git-操作项" class="headerlink" title="3.4 在 IDEA 下使用 Git 操作项"></a>3.4 在 IDEA 下使用 Git 操作项</h3><h4 id="3-4-1-git-add"><a href="#3-4-1-git-add" class="headerlink" title="3.4.1 git add"></a>3.4.1 git add</h4><p>如图选中要提交的项目，右键 git / add，表示添加该项目到本地仓库</p><img src="/2018/12/02/git-and-github/微信截图_20181202152524.png" title="add"><p>如果没有 git 操作项，则找到工具栏上方的 CVS / Enable Version Control Integration，选择 Git，此时再右键项目根目录就出现 Git 操作项了。</p><img src="/2018/12/02/git-and-github/微信截图_20181202152834.png" title="enable"><h4 id="3-4-2-git-commit"><a href="#3-4-2-git-commit" class="headerlink" title="3.4.2 git commit"></a>3.4.2 git commit</h4><p>使用 git commit 提交到本地仓库</p><img src="/2018/12/02/git-and-github/微信截图_20181202153801.png" title="commit"><img src="/2018/12/02/git-and-github/微信截图_20181202153713.png" title="commit"><h4 id="3-4-3-配置-remote-repository"><a href="#3-4-3-配置-remote-repository" class="headerlink" title="3.4.3 配置 remote repository"></a>3.4.3 配置 remote repository</h4><p>选择 git / repository / remores，然后填上 Github 远程仓库 HTTP 地址（注意不是 SSH，不可以吗？）</p><img src="/2018/12/02/git-and-github/微信截图_20181202153911.png" title="remote"><img src="/2018/12/02/git-and-github/微信截图_20181202154131.png" title="url"><h4 id="3-4-4-git-push"><a href="#3-4-4-git-push" class="headerlink" title="3.4.4 git push"></a>3.4.4 git push</h4><p>配置好 remote 地址，就可以把本地代码 推送到远程 Github 仓库了</p><img src="/2018/12/02/git-and-github/微信截图_20181202154216.png" title="push"><img src="/2018/12/02/git-and-github/微信截图_20181202154320.png" title="push"><p>F5 一下 Github 相应远程仓库，我们发现代码已经提交成功了。</p><img src="/2018/12/02/git-and-github/微信截图_20181202154400.png" title="success"><h2 id="四、使用-IDEA-从-Github-克隆项目"><a href="#四、使用-IDEA-从-Github-克隆项目" class="headerlink" title="四、使用 IDEA 从 Github 克隆项目"></a>四、使用 IDEA 从 Github 克隆项目</h2><p>在 IDEA 的启动面板选择 check out from version control，并选择 git</p><img src="/2018/12/02/git-and-github/微信截图_20181202154612.png" title="checkout"><p>填好要 clone 的 HTTP 地址，点击 clone</p><img src="/2018/12/02/git-and-github/微信截图_20181202154811.png" title="http"><p>因为我们要 clone 的是 maven 过程，所以选择 Import maven</p><img src="/2018/12/02/git-and-github/微信截图_20181202154858.png" title="maven"><p>选择具体的项目，不出意外一路 Next</p><img src="/2018/12/02/git-and-github/微信截图_20181202155102.png" title="project"><p>我们 checkout 的是 Spring Boot 工程，不出意外如图所示成功运行</p><img src="/2018/12/02/git-and-github/微信截图_20181202160612.png" title="spring boot"><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h2><ul><li><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" rel="external nofollow noopener noreferrer" target="_blank">廖雪峰 - Git 教程</a></p></li><li><p><a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5" rel="external nofollow noopener noreferrer" target="_blank">Git 官网</a></p></li><li><p><a href="https://www.cnblogs.com/java-maowei/p/5950930.html" rel="external nofollow noopener noreferrer" target="_blank">完整教程–idea使用git进行项目管理</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以下记录自己安装 Git、使用 Git 基础命令向 Github 提交代码以及 IDEA 整合 Git 或 Github 的过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="GitHub" scheme="https://calvinhwang123.github.io/categories/GitHub/"/>
    
    
      <category term="Git" scheme="https://calvinhwang123.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="https://calvinhwang123.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github Pages 搭建博客</title>
    <link href="https://calvinhwang123.github.io/2018/12/02/hexo-and-github-pages/"/>
    <id>https://calvinhwang123.github.io/2018/12/02/hexo-and-github-pages/</id>
    <published>2018-12-01T16:00:00.000Z</published>
    <updated>2018-12-09T12:01:31.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装-Hexo"><a href="#一、安装-Hexo" class="headerlink" title="一、安装 Hexo"></a>一、安装 Hexo</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" rel="external nofollow noopener noreferrer" target="_blank">Node.js</a></li><li><a href="http://git-scm.com/" rel="external nofollow noopener noreferrer" target="_blank">Git</a></li></ul><a id="more"></a><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202190954.png" title="install"><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202191453.png" title="cmd"><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202191408.png" title="cli"><h2 id="二、创建-Github-Pages"><a href="#二、创建-Github-Pages" class="headerlink" title="二、创建 Github Pages"></a>二、创建 Github Pages</h2><p>新建一个 repository，命名为 youraccount.github.com，然后点击 settings</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202194542.png" title="settings"><p>挑选一款还行的 theme，点击完成。</p><p>访问 youraccount.github.io 看看效果（可能出现网络延迟，耐心等待效果~）</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202195403.png" title="github io"><h2 id="三、搭建本地-Hexo-服务器"><a href="#三、搭建本地-Hexo-服务器" class="headerlink" title="三、搭建本地 Hexo 服务器"></a>三、搭建本地 Hexo 服务器</h2><h3 id="1、初始化-hexo"><a href="#1、初始化-hexo" class="headerlink" title="1、初始化 hexo"></a>1、初始化 hexo</h3><p>在一个合适的目录下打开 git-bash 窗口</p><p>执行以下命令 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202232722.png" title="init"><p>我们后期写的博文都将以 markdown 格式编写，放在 source / _post 下</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202215531.png" title="post"><h3 id="2、启动-Hexo-服务器"><a href="#2、启动-Hexo-服务器" class="headerlink" title="2、启动 Hexo 服务器"></a>2、启动 Hexo 服务器</h3><p>我们执行以下命令将默认生成的 hello-world,md 博客发布在本地 Hexo 服务器上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202215938.png" title="hexo s"><p>然后 在浏览器输入 localhost:4000 测试一下</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202220023.png" title="localhost"><h3 id="3、编写-md-博文"><a href="#3、编写-md-博文" class="headerlink" title="3、编写 md 博文"></a>3、编写 md 博文</h3><p>把我们自己编写的博文放在 _post 目录下</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202220429.png" title="post"><p>F5 一下，新发布的博文就显示出来了</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202220756.png" title="new"><p>p.s. 还有些小问题，如目录，标题，样式等暂不考虑</p><h2 id="四、自定义主题"><a href="#四、自定义主题" class="headerlink" title="四、自定义主题"></a>四、自定义主题</h2><h3 id="1、下载自定义主题"><a href="#1、下载自定义主题" class="headerlink" title="1、下载自定义主题"></a>1、下载自定义主题</h3><p>Hexo 官网提供了很多优秀的 theme，有需要请戳 <a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">这里</a> 。本文使用的主题是 <a href="https://xaoxuu.com/blog/" rel="external nofollow noopener noreferrer" target="_blank">material-x</a></p><p>打开终端，cd 到你博客的路径，下载主题到 themes/ 文件夹</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/xaoxuu/hexo-theme-material-x themes/material-x</span></span><br></pre></td></tr></table></figure><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202200305.png" title="theme"><p>然后在博客路径下安装依赖包</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content hexo-recommended-posts</span><br></pre></td></tr></table></figure><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202230032.png" title="npm"><h3 id="2、修改-config-yml"><a href="#2、修改-config-yml" class="headerlink" title="2、修改 _config.yml"></a>2、修改 _config.yml</h3><p>修改 _config.yml ，使得自定义 theme 生效</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202200645.png" title="theme"><h3 id="3、切换为自定义主题"><a href="#3、切换为自定义主题" class="headerlink" title="3、切换为自定义主题"></a>3、切换为自定义主题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo.sh i x</span><br></pre></td></tr></table></figure><p>如果提示 <code>command not found</code> ，说明你的电脑上还没有使用过 hexo.sh 脚本，那么可以执行下面这一段命令下载脚本然后应用主题：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O 'https://raw.githubusercontent.com/xaoxuu/hexo.sh/master/hexo.sh'</span><br></pre></td></tr></table></figure><p>此时再 <code>hexo s</code> 一下，自定义主题就生效了。</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202230125.png" title="localhost"><h3 id="4、生成博文"><a href="#4、生成博文" class="headerlink" title="4、生成博文"></a>4、生成博文</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202235549.png" title="public"><h2 id="五、发布到-Github-Pages"><a href="#五、发布到-Github-Pages" class="headerlink" title="五、发布到 Github Pages"></a>五、发布到 Github Pages</h2><p>首先从 Github clone 下 Github Pages</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202234009.png" title="pages"><p>将需要提交的文件夹从 本地 hexo 拷贝到 github pages 本地仓库</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181203000034.png" title="Local"><p>使用 git add 和 git commit 提交到本地仓库</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181203000154.png" title="git push"><p> 使用 git push 推送到远程仓库</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181202234720.png" title="push"><p>现在输入 <a href="https://calvinhwang123.github.io">https://calvinhwang123.github.io</a> 访问一下</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181203194736.png" title="github"><p>这样我们自定义主题就算完成了。</p><h2 id="六、修改-Material-X-主题配置"><a href="#六、修改-Material-X-主题配置" class="headerlink" title="六、修改 Material X 主题配置"></a>六、修改 Material X 主题配置</h2><p>在 themes / material-x / _config.yml 里这样一段说明</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181203201817.png" title="themes"><p>所以我们把配置搬到 blogpath / _config.yml 里面</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181203202009.png" title="main"><p>以上的配置配合注释基本没什么问题。</p><p>还有一部分主题配置可以直接在 material-x 的 _config.yml 下设置，如：网易云歌单等。</p><h2 id="七、使用-hexo-deployer-git-插件更新博客"><a href="#七、使用-hexo-deployer-git-插件更新博客" class="headerlink" title="七、使用 hexo-deployer-git 插件更新博客"></a>七、使用 hexo-deployer-git 插件更新博客</h2><p>我们发现每次都手动往 Github Pages 更新博客太麻烦了，通过 <code>hexo-deployer-git</code> 插件可以方便地更新博客</p><img src="/2018/12/02/hexo-and-github-pages/微信截图_20181203204820.png" title="deploy"><h2 id="七、参考文献"><a href="#七、参考文献" class="headerlink" title="七、参考文献"></a>七、参考文献</h2><ul><li><a href="https://hexo.io/zh-cn/" rel="external nofollow noopener noreferrer" target="_blank">Hexo 官网</a></li><li><a href="https://blog.csdn.net/qibin0506/article/details/51813428" rel="external nofollow noopener noreferrer" target="_blank">利用 githubpages 创建你的个人博客</a></li><li><a href="https://xaoxuu.com/wiki/material-x/" rel="external nofollow noopener noreferrer" target="_blank">Material X</a></li><li><a href="https://xaoxuu.com/blog/2017-07-05-hexo-blog/" rel="external nofollow noopener noreferrer" target="_blank">如何搭建基于 Hexo 的独立博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、安装-Hexo&quot;&gt;&lt;a href=&quot;#一、安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;一、安装 Hexo&quot;&gt;&lt;/a&gt;一、安装 Hexo&lt;/h2&gt;&lt;p&gt;安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="GitHub" scheme="https://calvinhwang123.github.io/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="https://calvinhwang123.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://calvinhwang123.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 自动配置</title>
    <link href="https://calvinhwang123.github.io/2018/11/30/spring-boot-auto-config/"/>
    <id>https://calvinhwang123.github.io/2018/11/30/spring-boot-auto-config/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2018-12-04T15:53:02.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-EnableAutoConfiguration-与自动配置"><a href="#一、-EnableAutoConfiguration-与自动配置" class="headerlink" title="一、@EnableAutoConfiguration 与自动配置"></a>一、@EnableAutoConfiguration 与自动配置</h2><p>@EnableAutoConfiguration 是 @AutoConfigurationPackage 和 @Import(AutoConfigurationImportSelector.class)的混合注解。</p><a id="more"></a><p>其中，@AutoConfigurationPackage  通过导入一个 AutoConfigurationPackages.Registrar 注册类为程序指定了自动配置的包范围为：<strong>XXXApplication</strong> 所在包及其子包，如果一个类位于<strong>XXXApplication</strong> 所在包之外，是不会被 Spring Boot 自动配置的。</p><p>@Import(AutoConfigurationImportSelector.class) 导入的AutoConfigurationImportSelector 作为自动配置选择器，在程序运行时决定导入哪些自动配置类，即形如 <strong>XXXAutoConfiguraion</strong> 的自动配置类。</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130194705.png" title="auto configuration"><p>在 AutoConfigurationImportSelector 的 getCandidateConfigurations() 方法中，我们可以看到通过一个 SpringFactoriesLoader 去返回 configurations 数组，我们来看 loadFactoryNames() 方法：</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130195233.png" title="factory name"><p>我们发现 classLoader 加载自动配置资源的路径为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br></pre></td></tr></table></figure><p>打开该文件如下：</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130195640.png" title="factories"><p>为了验证 Spring Boot 就是从该 spring.factories 文件加载 自动配置的，我们 F6 一下返回configurations 数组：</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130195805.png" title="config array"><p>通过调试我们可以得出结论：Spring Boot 通过 @EnableAutoConfiguration  注解读取spring.factories 文件，完成了默认自动配置功能，这些自动配置类会在容器中生效，省去开发者手动配置的麻烦。</p><h2 id="二、-配置文件与-YAML"><a href="#二、-配置文件与-YAML" class="headerlink" title="二、 配置文件与 YAML"></a>二、 配置文件与 YAML</h2><h3 id="2-1-全局配置文件"><a href="#2-1-全局配置文件" class="headerlink" title="2.1 全局配置文件"></a>2.1 全局配置文件</h3><p>Spring Boot 全局配置文件命名为 application.properties 或者 application.yml.</p><p>配置文件可以放在 src/main/resources 或者类路径/config 下，当然还有其他位置，只是加载的顺序不同。</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130201801.png" title="app config"><p>使用配置文件可以对一些默认自动配置的值进行修改，如 context-path、port 等。</p><h3 id="2-2-YAML"><a href="#2-2-YAML" class="headerlink" title="2.2 YAML"></a>2.2 YAML</h3><p>.yml 是 YAML (YAML Ain’t Markup Language) 语言的文件，以数据为中心，比 JSON、XML 等更适合做配置文件。YAML具体的语法规范可以参考<a href="http://www.yaml.org" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p><h4 id="2-2-1-YAML-基本语法"><a href="#2-2-1-YAML-基本语法" class="headerlink" title="2.2.1 YAML 基本语法"></a>2.2.1 YAML 基本语法</h4><ul><li>使用缩进进行层级关系，键值对之间必须带空格</li><li>缩进时不允许使用 TAB 键，只允许 Space 即空格键</li><li>缩进空格数量不重要，相同层级元素左对齐即可。（约定俗成使用 2 个空格）</li><li>大小写敏感</li></ul><h4 id="2-2-2-支持三种数据结构"><a href="#2-2-2-支持三种数据结构" class="headerlink" title="2.2.2 支持三种数据结构"></a>2.2.2 支持三种数据结构</h4><ul><li>对象：键值对的集合，或者称为 MAP</li><li>数组：一组按次序排列的值</li><li>字面量：包括字符串，数字，布尔值和日期等</li></ul><h4 id="2-2-3-属性值注入例子"><a href="#2-2-3-属性值注入例子" class="headerlink" title="2.2.3 属性值注入例子"></a>2.2.3 属性值注入例子</h4><p>以下我们通过 @ConfigurationProperties 和 @Value 分别实现从配置文件读取属性注入到程序中。</p><p>首先创建实体类 Person 和 Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean isBoss;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isBoss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoss</span><span class="params">(Boolean boss)</span> </span>&#123;</span><br><span class="line">        isBoss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们添加 @ConfigurationProperties 注解时，IDEA 智能提示我们尚未导入 spring-boot-configuration-processor 依赖。所以在 pom.xml 下加入</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130205702.png" title="depend"><p>这里先以 properties 文件写入属性值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br><span class="line">server.servlet.context-path=/hello</span><br><span class="line"></span><br><span class="line">person.name=张三</span><br><span class="line">person.boss=false</span><br><span class="line">person.birthday=1995/01/01</span><br><span class="line">person.map.k1=v1</span><br><span class="line">person.map.k2=100</span><br><span class="line">person.map.k3=true</span><br><span class="line">person.list=1,true,hello</span><br><span class="line">person.dog.name=Rookie</span><br><span class="line">person.dog.age=2</span><br></pre></td></tr></table></figure><p>最后在 test 包下进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debug 运行后得到如下结果</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130212824.png" title="debug"><p>相应的 yml 格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">李四</span></span><br><span class="line"><span class="attr">  boss:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  birthday:</span> <span class="number">2000</span><span class="string">/1/1</span></span><br><span class="line"><span class="attr">  map:</span> <span class="string">&#123;</span> <span class="attr">k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="number">100</span><span class="string">,</span> <span class="attr">k3:</span> <span class="literal">false</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">  list:</span> <span class="number">1</span><span class="string">,</span> <span class="string">java,</span> <span class="string">你好,</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Tom</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上演示的是 list 的行内写法，缩进写法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">list:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Java</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">你好</span></span><br><span class="line"><span class="bullet">  -</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>我们注意到 application.properties 或 application.yml 都是全局配置文件，person 应该写在一个独立的 person.properties 比较合适，所以我们新建一个 properties 文件，并且为 Person 加上一个注解 @PropertySource 指定资源路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:person.properties"</span>) <span class="comment">// 这里 person.yml 可以不？</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后测试一下</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130214246.png" title="pro"><p>可以看到虽然属性值成功注入到 Person 组件了，但是从 properties 文件读取的值出现了中文乱码。这是由于 <strong>IDEA</strong> 使用 UTF-8 作为字符集，但是 properties 写入文件存的是 ASCII 编码，所以需要修改 IDEA properties 设置</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130214818.png" title="code"><p>重新编写 properties 文件，再次运行，发现乱码得到解决</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130215044.png" title="luanma"><p>我们也可以使用 @Value 注解实现属性值的注入</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181130215950.png" title="value"><p>如果我们只是在某个业务逻辑中需要获取以下配置文件中的某项值，使用 @Value 就可以了，如果专门写了一个 JavaBean 来和配置文件映射，直接使用 @ConfigurationProperties 会方便很多。</p><h3 id="2-3-多-Profile-文件"><a href="#2-3-多-Profile-文件" class="headerlink" title="2.3 多 Profile 文件"></a>2.3 多 Profile 文件</h3><p>我们在编写主配置文件时，文件名可以是 application-{profile}-properties/yml</p><p>默认使用的是 application.properties/yml</p><p>为了更方便的切换，我们可以使用 yml 的多文档块方式 —</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span> <span class="comment"># 默认端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span> <span class="comment"># 激活开发环境</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span> <span class="comment"># 指定是开发环境</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">test</span> <span class="comment"># 指定是测试环境</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span> <span class="comment"># 指定是生产环境</span></span><br></pre></td></tr></table></figure><h2 id="三、加载顺序"><a href="#三、加载顺序" class="headerlink" title="三、加载顺序"></a>三、加载顺序</h2><p>Spring Boot 启动会扫描以下位置的 application.properties 或者 application.yml 文件作为 Spring Boot 的默认配置文件：</p><ul><li>file:./config/ </li><li>file:./ </li><li>classpath:/config/ </li><li>classpath:/</li></ul><p>以上是按照优先级从高到低的顺序，所有位置的文件都会被加载，高优先 级配置内容会覆盖低优先级配置内容。</p><p>我们也可以通过配置spring.config.location来改变默认配置。</p><p>以下我们通过简单例子来论证以上观点。</p><img src="/2018/11/30/spring-boot-auto-config/微信截图_20181201213250.png" title="port"><p>我们在四个文件都指定了 server port ，分别为 8081，8082，8083 和 8084，而最后生效的是 8081，这说明 Spring Boot 优先加载 file:./config 下的配置文件</p><h2 id="四、配置原理"><a href="#四、配置原理" class="headerlink" title="四、配置原理"></a>四、配置原理</h2><p>1、可以查看HttpEncodingAutoConfiguration </p><p>2、通用模式 </p><p>– xxxAutoConfiguration：自动配置类 </p><p>– xxxProperties：属性配置类 </p><p>– yml/properties文件中能配置的值就来源于[属性配置类] </p><p>3、几个重要注解 </p><p>– @Bean </p><p>– @Conditional </p><p>4、–debug=true 查看详细的自动配置报告</p><p>精髓</p><p>1）、Spring Boot 启动会加载大量的自动配置类</p><p>2）、我们看我们需要的功能有没有 Spring Boot 默认写好的自动配置类；<br>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</p><p>4）、给容器中自动配置类添加组件的时候，会从 properties 类中获取某些属性。我们就可以在配置文件中指定这 些属性的值；</p><p>@Conditional 扩展</p><ul><li>@Conditional扩展注解 作用（判断是否满足当前指定条件） </li><li>@ConditionalOnJava 系统的java版本是否符合要求 </li><li>@ConditionalOnBean 容器中存在指定Bean</li><li>@ConditionalOnMissingBean 容器中不存在指定Bean </li><li>@ConditionalOnExpression 满足SpEL表达式指定 </li><li>@ConditionalOnClass 系统中有指定的类 </li><li>@ConditionalOnMissingClass 系统中没有指定的类 </li><li>@ConditionalOnSingleCandidate 容器中只有一个指定的Bean，或者这个Bean是首选Bean</li><li>@ConditionalOnProperty 系统中指定的属性是否有指定的值 </li><li>@ConditionalOnResource 类路径下是否存在指定资源文件 </li><li>@ConditionalOnWebApplication 当前是web环境 </li><li>@ConditionalOnNotWebApplication 当前不是web环境 </li><li>@ConditionalOnJndi JNDI存在指定项</li></ul><h2 id="五、本文-Demo"><a href="#五、本文-Demo" class="headerlink" title="五、本文 Demo"></a>五、本文 Demo</h2><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_002-spring-boot-autoconfig" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></p><h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><ul><li>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-EnableAutoConfiguration-与自动配置&quot;&gt;&lt;a href=&quot;#一、-EnableAutoConfiguration-与自动配置&quot; class=&quot;headerlink&quot; title=&quot;一、@EnableAutoConfiguration 与自动配置&quot;&gt;&lt;/a&gt;一、@EnableAutoConfiguration 与自动配置&lt;/h2&gt;&lt;p&gt;@EnableAutoConfiguration 是 @AutoConfigurationPackage 和 @Import(AutoConfigurationImportSelector.class)的混合注解。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>第一个 Spring Boot APP</title>
    <link href="https://calvinhwang123.github.io/2018/11/29/first-spring-boot-application/"/>
    <id>https://calvinhwang123.github.io/2018/11/29/first-spring-boot-application/</id>
    <published>2018-11-28T16:00:00.000Z</published>
    <updated>2018-12-04T12:00:58.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Spring-Boot-简介"><a href="#一、Spring-Boot-简介" class="headerlink" title="一、Spring Boot 简介"></a>一、Spring Boot 简介</h2><h3 id="1、产生背景"><a href="#1、产生背景" class="headerlink" title="1、产生背景"></a>1、产生背景</h3><p>Java EE 开发笨重、配置繁多、开发效率低下、部署流程复杂、第三方技术集成难度大</p><a id="more"></a><h3 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><ul><li>Spring 全家桶时代。通过 Spring MVC 处理控制层，Spring 事务管理处理业务层，Spring Data 处理持久层，Spring 拥有一套完整的企业级 Java WEB 应用开发的解决方案。</li><li>Spring Boot。目标是提供 Java EE 一站式解决方案。</li><li>Spring Cloud。目标是提供分布式整体解决方案。（微服务架构风格）</li></ul><h3 id="3、优势"><a href="#3、优势" class="headerlink" title="3、优势"></a>3、优势</h3><ul><li>快速创建独立运行的Spring项目以及与主流框架集成  –&gt; 各种 starter，暂且称为 <strong>场景启动器</strong></li><li>使用嵌入式的Servlet容器（默认支持 Tomcat，Jetty 和 Undertow，也可自定义），应用无需打成WAR包（可以打成 jar 包并使用内置 WEB 容器运行）</li><li>starters自动依赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值</li><li>无需配置XML，无代码生成，开箱即用</li><li>准生产环境的运行时应用监控 – 与云计算的天然集成</li></ul><h3 id="4、拓展：微服务架构风格"><a href="#4、拓展：微服务架构风格" class="headerlink" title="4、拓展：微服务架构风格"></a>4、拓展：微服务架构风格</h3><p>详见 微服务架构的倡导者 <strong>Martin Fowler</strong> 个人网站</p><p><a href="https://martinfowler.com/microservices/" rel="external nofollow noopener noreferrer" target="_blank">微服务架构风格介绍</a></p><blockquote><p>简而言之，微服务架构风格是将单个应用程序开发为一套小型服务的方法，每个小型服务都在自己的流程中运行，并与轻量级机制（通常是HTTP资源API）进行通信。这些服务围绕业务功能构建，可通过全自动部署机制独立部署。这些服务至少集中管理，可以用不同的编程语言编写，并使用不同的数据存储技术。——詹姆斯刘易斯和马丁福勒</p></blockquote><blockquote><p>In short, the microservice architectural style is an approach to developing a single application as a <strong>suite of small services</strong>, each <strong>running in its own process</strong> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery. There is a <strong>bare minimum of centralized management</strong> of these services, which may be written in different programming languages and use different data storage technologies.</p><p>– James Lewis and Martin Fowler</p></blockquote><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129203051.png" title="微服务架构示意图"><h3 id="5、总说"><a href="#5、总说" class="headerlink" title="5、总说"></a>5、总说</h3><p>Spring Boot 是 Pivotal 团队推出的 Java 开发框架。Spring Boot 使得开发者更轻易地开发出基于 Spring 的独立运行、生产级别的 WEB 应用。Spring Boot 为开发者整合了主流的第三方库，通过极少的配置，就能构建出一款企业级应用。</p><p>总的说，Spring Boot 是用来简化 Spring应用开发，本着 <strong>约定大于配置</strong> 的原则，去繁从简， just run as spring boot app ,就能创建一个独立的，产品级别的应用。</p><h2 id="二、入门小-Demo"><a href="#二、入门小-Demo" class="headerlink" title="二、入门小 Demo"></a>二、入门小 Demo</h2><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><ul><li><p>JDK 1.8</p></li><li><p>MAVEN 3.x</p></li><li><p>IDEA 2017.2.2 或 STS 3.9.x</p></li><li><p>Spring Boot 1.5.x 或 Spring Boot 2.1.0</p><blockquote><p>Spring Boot 2.1.x 要求 JDK 1.8+，Spring 5.1.x+，Tomcat 9，可以根据实际情况选用 Spring Boot 1.5.x 或者 Spring Boot 2.1.x</p></blockquote></li></ul><h3 id="2、IDEA-问个好"><a href="#2、IDEA-问个好" class="headerlink" title="2、IDEA 问个好"></a>2、IDEA 问个好</h3><blockquote><p><del>以下是基于个人喜好修改的几项 IDEA 配置，觉得有用的可以参考下</del></p><p><del><a href="file:///I:/20181129-first-spring-boot-application/annexs/IDEA%E5%BF%85%E6%94%B9%E7%9A%84%E5%9C%B0%E6%96%B9.txt" target="_blank" rel="noopener">IDEA Preferences</a></del></p></blockquote><p>首先是 New Project，前提是配置好了 Project SDK，即 JDK，并且保证在联网的环境下。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129204744.png" title="New Project"><p>其次是填写 Project Metadata，我们选择 Maven 工程，IDEA 将为我们生成 pom.xml 文件构建 Maven 工程。使用 Java 开发，package 方式为 jar 包。package 包名如果觉得过长可以修改下。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129205153.png" title="Project Metadata"><p>然后选择我们要添加的 dependences。因为我们是 WEB 入门小 demo，所以选择 web 依赖即可。Spring Boot 版本可以根据自身需要选择 2.x 或者 1.5x。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129205725.png" title="Dependences"><p>最后是确认项目名称和项目路径，然后点 finish 完成。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129210016.png" title="Finish"><p>以下是基于 IDEA MAVEN 构建的 Spring Boot 工程，如果略带强迫症的患者可以删除选中的几项无用配置文件</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129210428.png" title="Raw Project"><p>打开 pom.xml 文件，可以看到一个最简的 Spring Boot 引入了 starter-web 和 starter-test 两个依赖，还有一个 maven-plugin 插件（用于编译maven工程）</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129210713.png" title="SIMPLE POM"><p>在 pom.xml 文件内部，右键 diagrams 可以查看项目依赖树</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129211200.png" title="DEPENDENCIES TREE"><img src="/2018/11/29/first-spring-boot-application/001first-spring-boot-app.png" title="dependencies tree"><p>既然我们编写的是 WEB 应用，需要编写 controller 层处理客户端请求</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129211947.png" title="hello controller"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HelloController.java</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&#123;&quot;/&quot;, &quot;/hello&quot;&#125;)</span><br><span class="line">    public String greeting() &#123;</span><br><span class="line">        return &quot;Hello Spring Boot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 Spring Boot 已经为我们创建了一个形如 XXXApplication 的启动类，带有 @SpringBootApplication 注解，并且有一个 main 方法。</p><p>选择 IDEA main 方法左侧运行图标，以 run 方式启动</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129212113.png" title="run application"><p>在 console 中除了看到 Spring Boot 绚丽的图标外，我们看到应用已经运行在内置的Tomcat 的 8080 端口上了。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129212506.png" title="console"><p>最后是通过 Chrome 等浏览器访问 WEB 服务。可以看到 localhost:8080/ 和 localhost:8080/hello 被我们的 HelloController 处理了。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129212829.png" title="chrome"><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213006.png" title="chrome2"><p>当然我们也可以使用 PostMan 工具模拟客户端请求，测试一下。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213230.png" title="postman"><h3 id="3、STS-问个好"><a href="#3、STS-问个好" class="headerlink" title="3、STS 问个好"></a>3、STS 问个好</h3><p>File / New / Spring Starter Project</p><img src="/2018/11/29/first-spring-boot-application/new_project.png" title="new project"><p>填写好 project 相关信息，Next</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129221029.png" title="next"><p>还是选择 web dependency 就好，然后点击 finish</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129221141.png" title="web"><p>以下是 STS 构建的 Spring Boot 工程。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129221323.png" title="spring boot"><p>同样编写一个 HelloController 用于处理前端请求。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129221551.png" title="hc"><p>STS 运行 Spring Boot 应用的方式为：右键 Application 启动类，Run As / Spring Boot App。</p><img src="/2018/11/29/first-spring-boot-application/run_as.png" title="sping boot app"><p>在 console 上可以看到 应用已经运行起来了。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129222026.png" title="console"><p>使用浏览器测试。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129222116.png" title="test"><h3 id="4、以-java-jar-方式运行"><a href="#4、以-java-jar-方式运行" class="headerlink" title="4、以 java -jar 方式运行"></a>4、以 java -jar 方式运行</h3><p>以下以 IDEA 为例演示 Spring Boot Maven jar 工程的打包，cmd 方式运行 WEB 应用。</p><p>调出 Maven 面板</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213442.png" title="maven panel"><p>找到 compile ，双击它</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213746.png" title="compile"><p>compile 成功后，IEDA 在 target 目录下为我们生成了 project_name.jar 可执行 jar 包</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213930.png" title="jar"><p>右键它，选择面板中的 show in explorer，在 Windows 的资源管理器路径下输入 cmd 三个字母</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129214220.png" title="show"><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129214317.png" title="cmd"><p>最后在 cmd 下执行java -jar project_name.jar ，前提是停止了 IDEA 运行的 web 工程，否则会出现端口占用的问题。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129214430.png" title="cmd"><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129214622.png" title="cmd result"><p>由以上可见，我们使用 java -jar 命令也能在 cmd 上运行 jar 应用。</p><h2 id="三、Spring-Boot-入口类探究"><a href="#三、Spring-Boot-入口类探究" class="headerlink" title="三、Spring Boot 入口类探究"></a>三、Spring Boot 入口类探究</h2><h3 id="1、入口类"><a href="#1、入口类" class="headerlink" title="1、入口类"></a>1、入口类</h3><p>程序从 main 方法开始执行，默认使用 SpringApplication.run() 加载主程序类</p><h3 id="2、-SpringBootApplication"><a href="#2、-SpringBootApplication" class="headerlink" title="2、@SpringBootApplication"></a>2、@SpringBootApplication</h3><p>实际上是个组合注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-SpringBootConfiguration"><a href="#2-1-SpringBootConfiguration" class="headerlink" title="2.1 @SpringBootConfiguration"></a>2.1 @SpringBootConfiguration</h4><p>其中，@SpringBootConfiguration 表示是 Spring 底层配置类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-ComponentScan"><a href="#2-2-ComponentScan" class="headerlink" title="2.2 @ComponentScan"></a>2.2 @ComponentScan</h4><p>@ComponentScan 是个组件扫描注解</p><h4 id="2-3-EnableAutoConfiguration"><a href="#2-3-EnableAutoConfiguration" class="headerlink" title="2.3 @EnableAutoConfiguration"></a>2.3 @EnableAutoConfiguration</h4><p>@EnableAutoConfiguration 是一个核心注解，表示允许 Spring Boot 完成自动配置功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-1-AutoConfigurationPackage"><a href="#2-3-1-AutoConfigurationPackage" class="headerlink" title="2.3.1 @AutoConfigurationPackage"></a>2.3.1 @AutoConfigurationPackage</h5><p>其中 @AutoConfigurationPackage 通过导入一个 AutoConfigurationPackages.Registrar 注册类为程序指定了自动配置的包范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br></pre></td></tr></table></figure><img src="/2018/11/29/first-spring-boot-application/微信截图_20181130001915.png" title="register"><img src="/2018/11/29/first-spring-boot-application/微信截图_20181130001106.png" title="packagename"><p> 由此可见，程序启动会扫描加载主程序类所在的包以及子包。这说明如果一个包位于主程序类所在包之外，是不会被 Spring 容器扫描实例化的。以下是简单的例子：</p><p>AnotherController 位于 com.shinedeer.springboot 包之外</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181130002413.png" title="out"><p>通过浏览器访问 localhost:8080/another 请求，结果返回 404。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181130002533.png" width="404"><h5 id="2-3-2-Import-AutoConfigurationImportSelector-class"><a href="#2-3-2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="2.3.2 @Import(AutoConfigurationImportSelector.class)"></a>2.3.2 @Import(AutoConfigurationImportSelector.class)</h5><p>@Import 作用是导入所有自动配置场景</p><p>AutoConfigurationImportSelector 会给容器中导入非常多的自动配置类，形如 <strong>XXXAutoConfiguration</strong> ，就是给容器中导入 starter 需要的组件并进行配置。 </p><h2 id="四、相关-Demo"><a href="#四、相关-Demo" class="headerlink" title="四、相关 Demo"></a>四、相关 Demo</h2><ul><li>本文 Demo <a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_001first-spring-boot-app" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></li><li>Spring Boot Official Samples <a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h2><ul><li><p>Spring Boot 官方 reference <a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p></li><li><p>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p><p>​</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Spring-Boot-简介&quot;&gt;&lt;a href=&quot;#一、Spring-Boot-简介&quot; class=&quot;headerlink&quot; title=&quot;一、Spring Boot 简介&quot;&gt;&lt;/a&gt;一、Spring Boot 简介&lt;/h2&gt;&lt;h3 id=&quot;1、产生背景&quot;&gt;&lt;a href=&quot;#1、产生背景&quot; class=&quot;headerlink&quot; title=&quot;1、产生背景&quot;&gt;&lt;/a&gt;1、产生背景&lt;/h3&gt;&lt;p&gt;Java EE 开发笨重、配置繁多、开发效率低下、部署流程复杂、第三方技术集成难度大&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://calvinhwang123.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
