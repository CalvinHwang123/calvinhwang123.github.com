<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codingの鹿先生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-03T14:38:49.936Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello Material X</title>
    <link href="http://yoursite.com/2018/12/03/hello-world/"/>
    <id>http://yoursite.com/2018/12/03/hello-world/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2018-12-03T14:38:49.936Z</updated>
    
    <content type="html"><![CDATA[<p>Hello，欢迎来到我的个人博客</p><a id="more"></a><p>(⊙﹏⊙)，博客刚刚搭建，还有许多功能未完善，敬请期待~<br>p.s. 别试了，帅的美的人才能评论，比如我，你是评论不了的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello，欢迎来到我的个人博客&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>第一个 Spring Boot APP</title>
    <link href="http://yoursite.com/2018/11/29/first-spring-boot-application/"/>
    <id>http://yoursite.com/2018/11/29/first-spring-boot-application/</id>
    <published>2018-11-28T16:00:00.000Z</published>
    <updated>2018-12-04T11:36:48.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Spring-Boot-简介"><a href="#一、Spring-Boot-简介" class="headerlink" title="一、Spring Boot 简介"></a>一、Spring Boot 简介</h2><h3 id="1、产生背景"><a href="#1、产生背景" class="headerlink" title="1、产生背景"></a>1、产生背景</h3><p>Java EE 开发笨重、配置繁多、开发效率低下、部署流程复杂、第三方技术集成难度大</p><a id="more"></a><h3 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><ul><li>Spring 全家桶时代。通过 Spring MVC 处理控制层，Spring 事务管理处理业务层，Spring Data 处理持久层，Spring 拥有一套完整的企业级 Java WEB 应用开发的解决方案。</li><li>Spring Boot。目标是提供 Java EE 一站式解决方案。</li><li>Spring Cloud。目标是提供分布式整体解决方案。（微服务架构风格）</li></ul><h3 id="3、优势"><a href="#3、优势" class="headerlink" title="3、优势"></a>3、优势</h3><ul><li>快速创建独立运行的Spring项目以及与主流框架集成  –&gt; 各种 starter，暂且称为 <strong>场景启动器</strong></li><li>使用嵌入式的Servlet容器（默认支持 Tomcat，Jetty 和 Undertow，也可自定义），应用无需打成WAR包（可以打成 jar 包并使用内置 WEB 容器运行）</li><li>starters自动依赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值</li><li>无需配置XML，无代码生成，开箱即用</li><li>准生产环境的运行时应用监控 – 与云计算的天然集成</li></ul><h3 id="4、拓展：微服务架构风格"><a href="#4、拓展：微服务架构风格" class="headerlink" title="4、拓展：微服务架构风格"></a>4、拓展：微服务架构风格</h3><p>详见 微服务架构的倡导者 <strong>Martin Fowler</strong> 个人网站</p><p><a href="https://martinfowler.com/microservices/" target="_blank" rel="noopener">微服务架构风格介绍</a></p><blockquote><p>简而言之，微服务架构风格是将单个应用程序开发为一套小型服务的方法，每个小型服务都在自己的流程中运行，并与轻量级机制（通常是HTTP资源API）进行通信。这些服务围绕业务功能构建，可通过全自动部署机制独立部署。这些服务至少集中管理，可以用不同的编程语言编写，并使用不同的数据存储技术。——詹姆斯刘易斯和马丁福勒</p></blockquote><blockquote><p>In short, the microservice architectural style is an approach to developing a single application as a <strong>suite of small services</strong>, each <strong>running in its own process</strong> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery. There is a <strong>bare minimum of centralized management</strong> of these services, which may be written in different programming languages and use different data storage technologies.</p><p>– James Lewis and Martin Fowler</p></blockquote><p><img src="first-spring-boot-application/微信截图_20181129203051.png" alt="微服务架构示意图"></p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129203051.png" title="微服务架构示意图"><h3 id="5、总说"><a href="#5、总说" class="headerlink" title="5、总说"></a>5、总说</h3><p>Spring Boot 是 Pivotal 团队推出的 Java 开发框架。Spring Boot 使得开发者更轻易地开发出基于 Spring 的独立运行、生产级别的 WEB 应用。Spring Boot 为开发者整合了主流的第三方库，通过极少的配置，就能构建出一款企业级应用。</p><p>总的说，Spring Boot 是用来简化 Spring应用开发，本着 <strong>约定大于配置</strong> 的原则，去繁从简， just run as spring boot app ,就能创建一个独立的，产品级别的应用。</p><h2 id="二、入门小-Demo"><a href="#二、入门小-Demo" class="headerlink" title="二、入门小 Demo"></a>二、入门小 Demo</h2><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><ul><li><p>JDK 1.8</p></li><li><p>MAVEN 3.x</p></li><li><p>IDEA 2017.2.2 或 STS 3.9.x</p></li><li><p>Spring Boot 1.5.x 或 Spring Boot 2.1.0</p><blockquote><p>Spring Boot 2.1.x 要求 JDK 1.8+，Spring 5.1.x+，Tomcat 9，可以根据实际情况选用 Spring Boot 1.5.x 或者 Spring Boot 2.1.x</p></blockquote></li></ul><h3 id="2、IDEA-问个好"><a href="#2、IDEA-问个好" class="headerlink" title="2、IDEA 问个好"></a>2、IDEA 问个好</h3><blockquote><p><del>以下是基于个人喜好修改的几项 IDEA 配置，觉得有用的可以参考下</del></p><p><del><a href="file:///I:/20181129-first-spring-boot-application/annexs/IDEA%E5%BF%85%E6%94%B9%E7%9A%84%E5%9C%B0%E6%96%B9.txt" target="_blank" rel="noopener">IDEA Preferences</a></del></p></blockquote><p>首先是 New Project，前提是配置好了 Project SDK，即 JDK，并且保证在联网的环境下。<img src="first-spring-boot-application/微信截图_20181129204744.png" alt="New Project"></p><p>其次是填写 Project Metadata，我们选择 Maven 工程，IDEA 将为我们生成 pom.xml 文件构建 Maven 工程。使用 Java 开发，package 方式为 jar 包。package 包名如果觉得过长可以修改下。<img src="first-spring-boot-application/微信截图_20181129205153.png" alt="Project Metadata"></p><p>然后选择我们要添加的 dependences。因为我们是 WEB 入门小 demo，所以选择 web 依赖即可。Spring Boot 版本可以根据自身需要选择 2.x 或者 1.5x。</p><p><img src="first-spring-boot-application/微信截图_20181129205725.png" alt="Dependences"></p><p>最后是确认项目名称和项目路径，然后点 finish 完成。</p><p><img src="first-spring-boot-application/微信截图_20181129210016.png" alt="Finish"></p><p>以下是基于 IDEA MAVEN 构建的 Spring Boot 工程，如果略带强迫症的患者可以删除选中的几项无用配置文件</p><p><img src="first-spring-boot-application/微信截图_20181129210428.png" alt="Raw Project"></p><p>打开 pom.xml 文件，可以看到一个最简的 Spring Boot 引入了 starter-web 和 starter-test 两个依赖，还有一个 maven-plugin 插件（用于编译maven工程）</p><p><img src="first-spring-boot-application/微信截图_20181129210713.png" alt="SIMPLE POM"></p><p>在 pom.xml 文件内部，右键 diagrams 可以查看项目依赖树</p><p><img src="first-spring-boot-application/微信截图_20181129211200.png" alt="DEPENDENCIES TREE"></p><p><img src="first-spring-boot-application/_001first-spring-boot-app.png" alt="dependencies tree"></p><p>既然我们编写的是 WEB 应用，需要编写 controller 层处理客户端请求</p><p><img src="first-spring-boot-application/微信截图_20181129211947.png" alt="hello controller"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HelloController.java</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&#123;&quot;/&quot;, &quot;/hello&quot;&#125;)</span><br><span class="line">    public String greeting() &#123;</span><br><span class="line">        return &quot;Hello Spring Boot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 Spring Boot 已经为我们创建了一个形如 XXXApplication 的启动类，带有 @SpringBootApplication 注解，并且有一个 main 方法。</p><p>选择 IDEA main 方法左侧运行图标，以 run 方式启动</p><p><img src="first-spring-boot-application/微信截图_20181129212113.png" alt="run application"></p><p>在 console 中除了看到 Spring Boot 绚丽的图标外，我们看到应用已经运行在内置的Tomcat 的 8080 端口上了。<img src="first-spring-boot-application/微信截图_20181129212506.png" alt="console"></p><p>最后是通过 Chrome 等浏览器访问 WEB 服务。可以看到 localhost:8080/ 和 localhost:8080/hello 被我们的 HelloController 处理了。</p><p><img src="first-spring-boot-application/微信截图_20181129212829.png" alt="chrome"></p><p><img src="first-spring-boot-application/微信截图_20181129213006.png" alt="chrome2"></p><p>当然我们也可以使用 PostMan 工具模拟客户端请求，测试一下。</p><p><img src="first-spring-boot-application/微信截图_20181129213230.png" alt="postman"></p><h3 id="3、STS-问个好"><a href="#3、STS-问个好" class="headerlink" title="3、STS 问个好"></a>3、STS 问个好</h3><p>File / New / Spring Starter Project</p><p><img src="first-spring-boot-application/new_project.png" alt="new project"></p><p>填写好 project 相关信息，Next</p><p><img src="first-spring-boot-application/微信截图_20181129221029.png" alt="next"></p><p>还是选择 web dependency 就好，然后点击 finish</p><p><img src="first-spring-boot-application/微信截图_20181129221141.png" alt="web"></p><p>以下是 STS 构建的 Spring Boot 工程。</p><p><img src="first-spring-boot-application/微信截图_20181129221323.png" alt="spring boot"></p><p>同样编写一个 HelloController 用于处理前端请求。</p><p><img src="first-spring-boot-application/微信截图_20181129221551.png" alt="hc"></p><p>STS 运行 Spring Boot 应用的方式为：右键 Application 启动类，Run As / Spring Boot App。</p><p><img src="first-spring-boot-application/run_as.png" alt="sping boot app"></p><p>在 console 上可以看到 应用已经运行起来了。</p><p><img src="first-spring-boot-application/微信截图_20181129222026.png" alt="console"></p><p>使用浏览器测试。</p><p><img src="first-spring-boot-application/微信截图_20181129222116.png" alt="test"></p><h3 id="4、以-java-jar-方式运行"><a href="#4、以-java-jar-方式运行" class="headerlink" title="4、以 java -jar 方式运行"></a>4、以 java -jar 方式运行</h3><p>以下以 IDEA 为例演示 Spring Boot Maven jar 工程的打包，cmd 方式运行 WEB 应用。</p><p>调出 Maven 面板</p><p><img src="first-spring-boot-application/微信截图_20181129213442.png" alt="maven panel"></p><p>找到 compile ，双击它</p><p><img src="first-spring-boot-application/微信截图_20181129213746.png" alt="compile"></p><p>compile 成功后，IEDA 在 target 目录下为我们生成了 project_name.jar 可执行 jar 包</p><p><img src="first-spring-boot-application/微信截图_20181129213930.png" alt="jar"></p><p>右键它，选择面板中的 show in explorer，在 Windows 的资源管理器路径下输入 cmd 三个字母</p><p><img src="first-spring-boot-application/微信截图_20181129214220.png" alt="show"></p><p><img src="first-spring-boot-application/微信截图_20181129214317.png" alt="cmd"></p><p>最后在 cmd 下执行java -jar project_name.jar ，前提是停止了 IDEA 运行的 web 工程，否则会出现端口占用的问题。</p><p><img src="first-spring-boot-application/微信截图_20181129214430.png" alt="cmd"></p><p><img src="first-spring-boot-application/微信截图_20181129214622.png" alt="cmd result"></p><p>由以上可见，我们使用 java -jar 命令也能在 cmd 上运行 jar 应用。</p><h2 id="三、Spring-Boot-入口类探究"><a href="#三、Spring-Boot-入口类探究" class="headerlink" title="三、Spring Boot 入口类探究"></a>三、Spring Boot 入口类探究</h2><h3 id="1、入口类"><a href="#1、入口类" class="headerlink" title="1、入口类"></a>1、入口类</h3><p>程序从 main 方法开始执行，默认使用 SpringApplication.run() 加载主程序类</p><h3 id="2、-SpringBootApplication"><a href="#2、-SpringBootApplication" class="headerlink" title="2、@SpringBootApplication"></a>2、@SpringBootApplication</h3><p>实际上是个组合注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-SpringBootConfiguration"><a href="#2-1-SpringBootConfiguration" class="headerlink" title="2.1 @SpringBootConfiguration"></a>2.1 @SpringBootConfiguration</h4><p>其中，@SpringBootConfiguration 表示是 Spring 底层配置类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-ComponentScan"><a href="#2-2-ComponentScan" class="headerlink" title="2.2 @ComponentScan"></a>2.2 @ComponentScan</h4><p>@ComponentScan 是个组件扫描注解</p><h4 id="2-3-EnableAutoConfiguration"><a href="#2-3-EnableAutoConfiguration" class="headerlink" title="2.3 @EnableAutoConfiguration"></a>2.3 @EnableAutoConfiguration</h4><p>@EnableAutoConfiguration 是一个核心注解，表示允许 Spring Boot 完成自动配置功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-1-AutoConfigurationPackage"><a href="#2-3-1-AutoConfigurationPackage" class="headerlink" title="2.3.1 @AutoConfigurationPackage"></a>2.3.1 @AutoConfigurationPackage</h5><p>其中 @AutoConfigurationPackage 通过导入一个 AutoConfigurationPackages.Registrar 注册类为程序指定了自动配置的包范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="first-spring-boot-application/微信截图_20181130001915.png" alt="register"></p><p><img src="first-spring-boot-application/微信截图_20181130001106.png" alt="packagename"></p><p> 由此可见，程序启动会扫描加载主程序类所在的包以及子包。这说明如果一个包位于主程序类所在包之外，是不会被 Spring 容器扫描实例化的。以下是简单的例子：</p><p>AnotherController 位于 com.shinedeer.springboot 包之外</p><p><img src="first-spring-boot-application/微信截图_20181130002413.png" alt="out"></p><p>通过浏览器访问 localhost:8080/another 请求，结果返回 404。</p><p><img src="first-spring-boot-application/微信截图_20181130002533.png" alt="404"></p><h5 id="2-3-2-Import-AutoConfigurationImportSelector-class"><a href="#2-3-2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="2.3.2 @Import(AutoConfigurationImportSelector.class)"></a>2.3.2 @Import(AutoConfigurationImportSelector.class)</h5><p>@Import 作用是导入所有自动配置场景</p><p>AutoConfigurationImportSelector 会给容器中导入非常多的自动配置类，形如 <strong>XXXAutoConfiguration</strong> ，就是给容器中导入 starter 需要的组件并进行配置。 </p><h2 id="四、相关-Demo"><a href="#四、相关-Demo" class="headerlink" title="四、相关 Demo"></a>四、相关 Demo</h2><ul><li>本文 Demo <a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_001first-spring-boot-app" target="_blank" rel="noopener">占位符</a></li><li>Spring Boot Official Samples <a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">Github</a></li></ul><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h2><ul><li><p>Spring Boot 官方 reference <a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started" target="_blank" rel="noopener">官网</a></p></li><li><p>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" target="_blank" rel="noopener">官网</a></p><p>​</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Spring-Boot-简介&quot;&gt;&lt;a href=&quot;#一、Spring-Boot-简介&quot; class=&quot;headerlink&quot; title=&quot;一、Spring Boot 简介&quot;&gt;&lt;/a&gt;一、Spring Boot 简介&lt;/h2&gt;&lt;h3 id=&quot;1、产生背景&quot;&gt;&lt;a href=&quot;#1、产生背景&quot; class=&quot;headerlink&quot; title=&quot;1、产生背景&quot;&gt;&lt;/a&gt;1、产生背景&lt;/h3&gt;&lt;p&gt;Java EE 开发笨重、配置繁多、开发效率低下、部署流程复杂、第三方技术集成难度大&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://yoursite.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
