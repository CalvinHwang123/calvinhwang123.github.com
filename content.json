{"meta":{"title":"codingの鹿先生","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Hello Material X","slug":"hello-world","date":"2018-12-02T16:00:00.000Z","updated":"2018-12-03T14:38:49.936Z","comments":true,"path":"2018/12/03/hello-world/","link":"","permalink":"http://yoursite.com/2018/12/03/hello-world/","excerpt":"Hello，欢迎来到我的个人博客","text":"Hello，欢迎来到我的个人博客 (⊙﹏⊙)，博客刚刚搭建，还有许多功能未完善，敬请期待~p.s. 别试了，帅的美的人才能评论，比如我，你是评论不了的。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"第一个 Spring Boot APP","slug":"first-spring-boot-application","date":"2018-11-28T16:00:00.000Z","updated":"2018-12-04T12:00:58.764Z","comments":true,"path":"2018/11/29/first-spring-boot-application/","link":"","permalink":"http://yoursite.com/2018/11/29/first-spring-boot-application/","excerpt":"一、Spring Boot 简介1、产生背景Java EE 开发笨重、配置繁多、开发效率低下、部署流程复杂、第三方技术集成难度大","text":"一、Spring Boot 简介1、产生背景Java EE 开发笨重、配置繁多、开发效率低下、部署流程复杂、第三方技术集成难度大 2、解决方案 Spring 全家桶时代。通过 Spring MVC 处理控制层，Spring 事务管理处理业务层，Spring Data 处理持久层，Spring 拥有一套完整的企业级 Java WEB 应用开发的解决方案。 Spring Boot。目标是提供 Java EE 一站式解决方案。 Spring Cloud。目标是提供分布式整体解决方案。（微服务架构风格） 3、优势 快速创建独立运行的Spring项目以及与主流框架集成 –&gt; 各种 starter，暂且称为 场景启动器 使用嵌入式的Servlet容器（默认支持 Tomcat，Jetty 和 Undertow，也可自定义），应用无需打成WAR包（可以打成 jar 包并使用内置 WEB 容器运行） starters自动依赖与版本控制 大量的自动配置，简化开发，也可修改默认值 无需配置XML，无代码生成，开箱即用 准生产环境的运行时应用监控 – 与云计算的天然集成 4、拓展：微服务架构风格详见 微服务架构的倡导者 Martin Fowler 个人网站 微服务架构风格介绍 简而言之，微服务架构风格是将单个应用程序开发为一套小型服务的方法，每个小型服务都在自己的流程中运行，并与轻量级机制（通常是HTTP资源API）进行通信。这些服务围绕业务功能构建，可通过全自动部署机制独立部署。这些服务至少集中管理，可以用不同的编程语言编写，并使用不同的数据存储技术。——詹姆斯刘易斯和马丁福勒 In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies. – James Lewis and Martin Fowler 5、总说Spring Boot 是 Pivotal 团队推出的 Java 开发框架。Spring Boot 使得开发者更轻易地开发出基于 Spring 的独立运行、生产级别的 WEB 应用。Spring Boot 为开发者整合了主流的第三方库，通过极少的配置，就能构建出一款企业级应用。 总的说，Spring Boot 是用来简化 Spring应用开发，本着 约定大于配置 的原则，去繁从简， just run as spring boot app ,就能创建一个独立的，产品级别的应用。 二、入门小 Demo1、开发环境 JDK 1.8 MAVEN 3.x IDEA 2017.2.2 或 STS 3.9.x Spring Boot 1.5.x 或 Spring Boot 2.1.0 Spring Boot 2.1.x 要求 JDK 1.8+，Spring 5.1.x+，Tomcat 9，可以根据实际情况选用 Spring Boot 1.5.x 或者 Spring Boot 2.1.x 2、IDEA 问个好 以下是基于个人喜好修改的几项 IDEA 配置，觉得有用的可以参考下 IDEA Preferences 首先是 New Project，前提是配置好了 Project SDK，即 JDK，并且保证在联网的环境下。 其次是填写 Project Metadata，我们选择 Maven 工程，IDEA 将为我们生成 pom.xml 文件构建 Maven 工程。使用 Java 开发，package 方式为 jar 包。package 包名如果觉得过长可以修改下。 然后选择我们要添加的 dependences。因为我们是 WEB 入门小 demo，所以选择 web 依赖即可。Spring Boot 版本可以根据自身需要选择 2.x 或者 1.5x。 最后是确认项目名称和项目路径，然后点 finish 完成。 以下是基于 IDEA MAVEN 构建的 Spring Boot 工程，如果略带强迫症的患者可以删除选中的几项无用配置文件 打开 pom.xml 文件，可以看到一个最简的 Spring Boot 引入了 starter-web 和 starter-test 两个依赖，还有一个 maven-plugin 插件（用于编译maven工程） 在 pom.xml 文件内部，右键 diagrams 可以查看项目依赖树 既然我们编写的是 WEB 应用，需要编写 controller 层处理客户端请求 1234567891011HelloController.java@RestControllerpublic class HelloController &#123; @GetMapping(&#123;&quot;/&quot;, &quot;/hello&quot;&#125;) public String greeting() &#123; return &quot;Hello Spring Boot&quot;; &#125;&#125; 可以看到 Spring Boot 已经为我们创建了一个形如 XXXApplication 的启动类，带有 @SpringBootApplication 注解，并且有一个 main 方法。 选择 IDEA main 方法左侧运行图标，以 run 方式启动 在 console 中除了看到 Spring Boot 绚丽的图标外，我们看到应用已经运行在内置的Tomcat 的 8080 端口上了。 最后是通过 Chrome 等浏览器访问 WEB 服务。可以看到 localhost:8080/ 和 localhost:8080/hello 被我们的 HelloController 处理了。 当然我们也可以使用 PostMan 工具模拟客户端请求，测试一下。 3、STS 问个好File / New / Spring Starter Project 填写好 project 相关信息，Next 还是选择 web dependency 就好，然后点击 finish 以下是 STS 构建的 Spring Boot 工程。 同样编写一个 HelloController 用于处理前端请求。 STS 运行 Spring Boot 应用的方式为：右键 Application 启动类，Run As / Spring Boot App。 在 console 上可以看到 应用已经运行起来了。 使用浏览器测试。 4、以 java -jar 方式运行以下以 IDEA 为例演示 Spring Boot Maven jar 工程的打包，cmd 方式运行 WEB 应用。 调出 Maven 面板 找到 compile ，双击它 compile 成功后，IEDA 在 target 目录下为我们生成了 project_name.jar 可执行 jar 包 右键它，选择面板中的 show in explorer，在 Windows 的资源管理器路径下输入 cmd 三个字母 最后在 cmd 下执行java -jar project_name.jar ，前提是停止了 IDEA 运行的 web 工程，否则会出现端口占用的问题。 由以上可见，我们使用 java -jar 命令也能在 cmd 上运行 jar 应用。 三、Spring Boot 入口类探究1、入口类程序从 main 方法开始执行，默认使用 SpringApplication.run() 加载主程序类 2、@SpringBootApplication实际上是个组合注解： 123456@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)public @interface SpringBootApplication &#123;&#125; 2.1 @SpringBootConfiguration其中，@SpringBootConfiguration 表示是 Spring 底层配置类，如下： 12@Configurationpublic @interface SpringBootConfiguration &#123;&#125; 2.2 @ComponentScan@ComponentScan 是个组件扫描注解 2.3 @EnableAutoConfiguration@EnableAutoConfiguration 是一个核心注解，表示允许 Spring Boot 完成自动配置功能 123@AutoConfigurationPackage@Import(AutoConfigurationImportSelector.class)public @interface EnableAutoConfiguration &#123;&#125; 2.3.1 @AutoConfigurationPackage其中 @AutoConfigurationPackage 通过导入一个 AutoConfigurationPackages.Registrar 注册类为程序指定了自动配置的包范围 12@Import(AutoConfigurationPackages.Registrar.class)public @interface AutoConfigurationPackage &#123;&#125; 由此可见，程序启动会扫描加载主程序类所在的包以及子包。这说明如果一个包位于主程序类所在包之外，是不会被 Spring 容器扫描实例化的。以下是简单的例子： AnotherController 位于 com.shinedeer.springboot 包之外 通过浏览器访问 localhost:8080/another 请求，结果返回 404。 2.3.2 @Import(AutoConfigurationImportSelector.class)@Import 作用是导入所有自动配置场景 AutoConfigurationImportSelector 会给容器中导入非常多的自动配置类，形如 XXXAutoConfiguration ，就是给容器中导入 starter 需要的组件并进行配置。 四、相关 Demo 本文 Demo 占位符 Spring Boot Official Samples Github 五、参考文献 Spring Boot 官方 reference 官网 尚硅谷 Spring Boot 核心技术篇 官网 ​ ​","categories":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"http://yoursite.com/categories/Spring-Boot/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"http://yoursite.com/tags/Spring-Boot/"}]}]}