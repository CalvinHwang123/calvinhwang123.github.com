<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring Boot 自动配置</title>
      <link href="/2018/11/30/spring-auto-config/"/>
      <url>/2018/11/30/spring-auto-config/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-EnableAutoConfiguration-与自动配置"><a href="#一、-EnableAutoConfiguration-与自动配置" class="headerlink" title="一、@EnableAutoConfiguration 与自动配置"></a>一、@EnableAutoConfiguration 与自动配置</h2><p>@EnableAutoConfiguration 是 @AutoConfigurationPackage 和 @Import(AutoConfigurationImportSelector.class)的混合注解。</p><a id="more"></a><p>其中，@AutoConfigurationPackage  通过导入一个 AutoConfigurationPackages.Registrar 注册类为程序指定了自动配置的包范围为：<strong>XXXApplication</strong> 所在包及其子包，如果一个类位于<strong>XXXApplication</strong> 所在包之外，是不会被 Spring Boot 自动配置的。</p><p>@Import(AutoConfigurationImportSelector.class) 导入的AutoConfigurationImportSelector 作为自动配置选择器，在程序运行时决定导入哪些自动配置类，即形如 <strong>XXXAutoConfiguraion</strong> 的自动配置类。</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130194705.png" title="auto configuration"><p>在 AutoConfigurationImportSelector 的 getCandidateConfigurations() 方法中，我们可以看到通过一个 SpringFactoriesLoader 去返回 configurations 数组，我们来看 loadFactoryNames() 方法：</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130195233.png" title="factory name"><p>我们发现 classLoader 加载自动配置资源的路径为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br></pre></td></tr></table></figure><p>打开该文件如下：</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130195640.png" title="factories"><p>为了验证 Spring Boot 就是从该 spring.factories 文件加载 自动配置的，我们 F6 一下返回configurations 数组：</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130195805.png" title="config array"><p>通过调试我们可以得出结论：Spring Boot 通过 @EnableAutoConfiguration  注解读取spring.factories 文件，完成了默认自动配置功能，这些自动配置类会在容器中生效，省去开发者手动配置的麻烦。</p><h2 id="二、-配置文件与-YAML"><a href="#二、-配置文件与-YAML" class="headerlink" title="二、 配置文件与 YAML"></a>二、 配置文件与 YAML</h2><h3 id="2-1-全局配置文件"><a href="#2-1-全局配置文件" class="headerlink" title="2.1 全局配置文件"></a>2.1 全局配置文件</h3><p>Spring Boot 全局配置文件命名为 application.properties 或者 application.yml.</p><p>配置文件可以放在 src/main/resources 或者类路径/config 下，当然还有其他位置，只是加载的顺序不同。</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130201801.png" title="app config"><p>使用配置文件可以对一些默认自动配置的值进行修改，如 context-path、port 等。</p><h3 id="2-2-YAML"><a href="#2-2-YAML" class="headerlink" title="2.2 YAML"></a>2.2 YAML</h3><p>.yml 是 YAML (YAML Ain’t Markup Language) 语言的文件，以数据为中心，比 JSON、XML 等更适合做配置文件。YAML具体的语法规范可以参考<a href="http://www.yaml.org" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p><h4 id="2-2-1-YAML-基本语法"><a href="#2-2-1-YAML-基本语法" class="headerlink" title="2.2.1 YAML 基本语法"></a>2.2.1 YAML 基本语法</h4><ul><li>使用缩进进行层级关系，键值对之间必须带空格</li><li>缩进时不允许使用 TAB 键，只允许 Space 即空格键</li><li>缩进空格数量不重要，相同层级元素左对齐即可。（约定俗成使用 2 个空格）</li><li>大小写敏感</li></ul><h4 id="2-2-2-支持三种数据结构"><a href="#2-2-2-支持三种数据结构" class="headerlink" title="2.2.2 支持三种数据结构"></a>2.2.2 支持三种数据结构</h4><ul><li>对象：键值对的集合，或者称为 MAP</li><li>数组：一组按次序排列的值</li><li>字面量：包括字符串，数字，布尔值和日期等</li></ul><h4 id="2-2-3-属性值注入例子"><a href="#2-2-3-属性值注入例子" class="headerlink" title="2.2.3 属性值注入例子"></a>2.2.3 属性值注入例子</h4><p>以下我们通过 @ConfigurationProperties 和 @Value 分别实现从配置文件读取属性注入到程序中。</p><p>首先创建实体类 Person 和 Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean isBoss;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isBoss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoss</span><span class="params">(Boolean boss)</span> </span>&#123;</span><br><span class="line">        isBoss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们添加 @ConfigurationProperties 注解时，IDEA 智能提示我们尚未导入 spring-boot-configuration-processor 依赖。所以在 pom.xml 下加入</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130205702.png" title="depend"><p>这里先以 properties 文件写入属性值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br><span class="line">server.servlet.context-path=/hello</span><br><span class="line"></span><br><span class="line">person.name=张三</span><br><span class="line">person.boss=false</span><br><span class="line">person.birthday=1995/01/01</span><br><span class="line">person.map.k1=v1</span><br><span class="line">person.map.k2=100</span><br><span class="line">person.map.k3=true</span><br><span class="line">person.list=1,true,hello</span><br><span class="line">person.dog.name=Rookie</span><br><span class="line">person.dog.age=2</span><br></pre></td></tr></table></figure><p>最后在 test 包下进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debug 运行后得到如下结果</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130212824.png" title="debug"><p>相应的 yml 格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">李四</span></span><br><span class="line"><span class="attr">  boss:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  birthday:</span> <span class="number">2000</span><span class="string">/1/1</span></span><br><span class="line"><span class="attr">  map:</span> <span class="string">&#123;</span> <span class="attr">k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="number">100</span><span class="string">,</span> <span class="attr">k3:</span> <span class="literal">false</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">  list:</span> <span class="number">1</span><span class="string">,</span> <span class="string">java,</span> <span class="string">你好,</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Tom</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上演示的是 list 的行内写法，缩进写法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">list:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Java</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">你好</span></span><br><span class="line"><span class="bullet">  -</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>我们注意到 application.properties 或 application.yml 都是全局配置文件，person 应该写在一个独立的 person.properties 比较合适，所以我们新建一个 properties 文件，并且为 Person 加上一个注解 @PropertySource 指定资源路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:person.properties"</span>) <span class="comment">// 这里 person.yml 可以不？</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后测试一下</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130214246.png" title="pro"><p>可以看到虽然属性值成功注入到 Person 组件了，但是从 properties 文件读取的值出现了中文乱码。这是由于 <strong>IDEA</strong> 使用 UTF-8 作为字符集，但是 properties 写入文件存的是 ASCII 编码，所以需要修改 IDEA properties 设置</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130214818.png" title="code"><p>重新编写 properties 文件，再次运行，发现乱码得到解决</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130215044.png" title="luanma"><p>我们也可以使用 @Value 注解实现属性值的注入</p><img src="/2018/11/30/spring-auto-config/微信截图_20181130215950.png" title="value"><p>如果我们只是在某个业务逻辑中需要获取以下配置文件中的某项值，使用 @Value 就可以了，如果专门写了一个 JavaBean 来和配置文件映射，直接使用 @ConfigurationProperties 会方便很多。</p><h3 id="2-3-多-Profile-文件"><a href="#2-3-多-Profile-文件" class="headerlink" title="2.3 多 Profile 文件"></a>2.3 多 Profile 文件</h3><p>我们在编写主配置文件时，文件名可以是 application-{profile}-properties/yml</p><p>默认使用的是 application.properties/yml</p><p>为了更方便的切换，我们可以使用 yml 的多文档块方式 —</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span> <span class="comment"># 默认端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span> <span class="comment"># 激活开发环境</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span> <span class="comment"># 指定是开发环境</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">test</span> <span class="comment"># 指定是测试环境</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span> <span class="comment"># 指定是生产环境</span></span><br></pre></td></tr></table></figure><h2 id="三、加载顺序"><a href="#三、加载顺序" class="headerlink" title="三、加载顺序"></a>三、加载顺序</h2><p>Spring Boot 启动会扫描以下位置的 application.properties 或者 application.yml 文件作为 Spring Boot 的默认配置文件：</p><ul><li>file:./config/ </li><li>file:./ </li><li>classpath:/config/ </li><li>classpath:/</li></ul><p>以上是按照优先级从高到低的顺序，所有位置的文件都会被加载，高优先 级配置内容会覆盖低优先级配置内容。</p><p>我们也可以通过配置spring.config.location来改变默认配置。</p><p>以下我们通过简单例子来论证以上观点。</p><img src="/2018/11/30/spring-auto-config/微信截图_20181201213250.png" title="port"><p>我们在四个文件都指定了 server port ，分别为 8081，8082，8083 和 8084，而最后生效的是 8081，这说明 Spring Boot 优先加载 file:./config 下的配置文件</p><h2 id="四、配置原理"><a href="#四、配置原理" class="headerlink" title="四、配置原理"></a>四、配置原理</h2><p>1、可以查看HttpEncodingAutoConfiguration </p><p>2、通用模式 </p><p>– xxxAutoConfiguration：自动配置类 </p><p>– xxxProperties：属性配置类 </p><p>– yml/properties文件中能配置的值就来源于[属性配置类] </p><p>3、几个重要注解 </p><p>– @Bean </p><p>– @Conditional </p><p>4、–debug=true 查看详细的自动配置报告</p><p>精髓</p><p>1）、Spring Boot 启动会加载大量的自动配置类</p><p>2）、我们看我们需要的功能有没有 Spring Boot 默认写好的自动配置类；<br>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</p><p>4）、给容器中自动配置类添加组件的时候，会从 properties 类中获取某些属性。我们就可以在配置文件中指定这 些属性的值；</p><p>@Conditional 扩展</p><ul><li>@Conditional扩展注解 作用（判断是否满足当前指定条件） </li><li>@ConditionalOnJava 系统的java版本是否符合要求 </li><li>@ConditionalOnBean 容器中存在指定Bean</li><li>@ConditionalOnMissingBean 容器中不存在指定Bean </li><li>@ConditionalOnExpression 满足SpEL表达式指定 </li><li>@ConditionalOnClass 系统中有指定的类 </li><li>@ConditionalOnMissingClass 系统中没有指定的类 </li><li>@ConditionalOnSingleCandidate 容器中只有一个指定的Bean，或者这个Bean是首选Bean</li><li>@ConditionalOnProperty 系统中指定的属性是否有指定的值 </li><li>@ConditionalOnResource 类路径下是否存在指定资源文件 </li><li>@ConditionalOnWebApplication 当前是web环境 </li><li>@ConditionalOnNotWebApplication 当前不是web环境 </li><li>@ConditionalOnJndi JNDI存在指定项</li></ul><h2 id="五、本文-Demo"><a href="#五、本文-Demo" class="headerlink" title="五、本文 Demo"></a>五、本文 Demo</h2><p><a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_002-spring-boot-autoconfig" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></p><h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><ul><li>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一个 Spring Boot APP</title>
      <link href="/2018/11/29/first-spring-boot-application/"/>
      <url>/2018/11/29/first-spring-boot-application/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Spring-Boot-简介"><a href="#一、Spring-Boot-简介" class="headerlink" title="一、Spring Boot 简介"></a>一、Spring Boot 简介</h2><h3 id="1、产生背景"><a href="#1、产生背景" class="headerlink" title="1、产生背景"></a>1、产生背景</h3><p>Java EE 开发笨重、配置繁多、开发效率低下、部署流程复杂、第三方技术集成难度大</p><a id="more"></a><h3 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><ul><li>Spring 全家桶时代。通过 Spring MVC 处理控制层，Spring 事务管理处理业务层，Spring Data 处理持久层，Spring 拥有一套完整的企业级 Java WEB 应用开发的解决方案。</li><li>Spring Boot。目标是提供 Java EE 一站式解决方案。</li><li>Spring Cloud。目标是提供分布式整体解决方案。（微服务架构风格）</li></ul><h3 id="3、优势"><a href="#3、优势" class="headerlink" title="3、优势"></a>3、优势</h3><ul><li>快速创建独立运行的Spring项目以及与主流框架集成  –&gt; 各种 starter，暂且称为 <strong>场景启动器</strong></li><li>使用嵌入式的Servlet容器（默认支持 Tomcat，Jetty 和 Undertow，也可自定义），应用无需打成WAR包（可以打成 jar 包并使用内置 WEB 容器运行）</li><li>starters自动依赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值</li><li>无需配置XML，无代码生成，开箱即用</li><li>准生产环境的运行时应用监控 – 与云计算的天然集成</li></ul><h3 id="4、拓展：微服务架构风格"><a href="#4、拓展：微服务架构风格" class="headerlink" title="4、拓展：微服务架构风格"></a>4、拓展：微服务架构风格</h3><p>详见 微服务架构的倡导者 <strong>Martin Fowler</strong> 个人网站</p><p><a href="https://martinfowler.com/microservices/" rel="external nofollow noopener noreferrer" target="_blank">微服务架构风格介绍</a></p><blockquote><p>简而言之，微服务架构风格是将单个应用程序开发为一套小型服务的方法，每个小型服务都在自己的流程中运行，并与轻量级机制（通常是HTTP资源API）进行通信。这些服务围绕业务功能构建，可通过全自动部署机制独立部署。这些服务至少集中管理，可以用不同的编程语言编写，并使用不同的数据存储技术。——詹姆斯刘易斯和马丁福勒</p></blockquote><blockquote><p>In short, the microservice architectural style is an approach to developing a single application as a <strong>suite of small services</strong>, each <strong>running in its own process</strong> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery. There is a <strong>bare minimum of centralized management</strong> of these services, which may be written in different programming languages and use different data storage technologies.</p><p>– James Lewis and Martin Fowler</p></blockquote><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129203051.png" title="微服务架构示意图"><h3 id="5、总说"><a href="#5、总说" class="headerlink" title="5、总说"></a>5、总说</h3><p>Spring Boot 是 Pivotal 团队推出的 Java 开发框架。Spring Boot 使得开发者更轻易地开发出基于 Spring 的独立运行、生产级别的 WEB 应用。Spring Boot 为开发者整合了主流的第三方库，通过极少的配置，就能构建出一款企业级应用。</p><p>总的说，Spring Boot 是用来简化 Spring应用开发，本着 <strong>约定大于配置</strong> 的原则，去繁从简， just run as spring boot app ,就能创建一个独立的，产品级别的应用。</p><h2 id="二、入门小-Demo"><a href="#二、入门小-Demo" class="headerlink" title="二、入门小 Demo"></a>二、入门小 Demo</h2><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><ul><li><p>JDK 1.8</p></li><li><p>MAVEN 3.x</p></li><li><p>IDEA 2017.2.2 或 STS 3.9.x</p></li><li><p>Spring Boot 1.5.x 或 Spring Boot 2.1.0</p><blockquote><p>Spring Boot 2.1.x 要求 JDK 1.8+，Spring 5.1.x+，Tomcat 9，可以根据实际情况选用 Spring Boot 1.5.x 或者 Spring Boot 2.1.x</p></blockquote></li></ul><h3 id="2、IDEA-问个好"><a href="#2、IDEA-问个好" class="headerlink" title="2、IDEA 问个好"></a>2、IDEA 问个好</h3><blockquote><p><del>以下是基于个人喜好修改的几项 IDEA 配置，觉得有用的可以参考下</del></p><p><del><a href="file:///I:/20181129-first-spring-boot-application/annexs/IDEA%E5%BF%85%E6%94%B9%E7%9A%84%E5%9C%B0%E6%96%B9.txt" target="_blank" rel="noopener">IDEA Preferences</a></del></p></blockquote><p>首先是 New Project，前提是配置好了 Project SDK，即 JDK，并且保证在联网的环境下。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129204744.png" title="New Project"><p>其次是填写 Project Metadata，我们选择 Maven 工程，IDEA 将为我们生成 pom.xml 文件构建 Maven 工程。使用 Java 开发，package 方式为 jar 包。package 包名如果觉得过长可以修改下。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129205153.png" title="Project Metadata"><p>然后选择我们要添加的 dependences。因为我们是 WEB 入门小 demo，所以选择 web 依赖即可。Spring Boot 版本可以根据自身需要选择 2.x 或者 1.5x。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129205725.png" title="Dependences"><p>最后是确认项目名称和项目路径，然后点 finish 完成。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129210016.png" title="Finish"><p>以下是基于 IDEA MAVEN 构建的 Spring Boot 工程，如果略带强迫症的患者可以删除选中的几项无用配置文件</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129210428.png" title="Raw Project"><p>打开 pom.xml 文件，可以看到一个最简的 Spring Boot 引入了 starter-web 和 starter-test 两个依赖，还有一个 maven-plugin 插件（用于编译maven工程）</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129210713.png" title="SIMPLE POM"><p>在 pom.xml 文件内部，右键 diagrams 可以查看项目依赖树</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129211200.png" title="DEPENDENCIES TREE"><img src="/2018/11/29/first-spring-boot-application/001first-spring-boot-app.png" title="dependencies tree"><p>既然我们编写的是 WEB 应用，需要编写 controller 层处理客户端请求</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129211947.png" title="hello controller"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HelloController.java</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&#123;&quot;/&quot;, &quot;/hello&quot;&#125;)</span><br><span class="line">    public String greeting() &#123;</span><br><span class="line">        return &quot;Hello Spring Boot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 Spring Boot 已经为我们创建了一个形如 XXXApplication 的启动类，带有 @SpringBootApplication 注解，并且有一个 main 方法。</p><p>选择 IDEA main 方法左侧运行图标，以 run 方式启动</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129212113.png" title="run application"><p>在 console 中除了看到 Spring Boot 绚丽的图标外，我们看到应用已经运行在内置的Tomcat 的 8080 端口上了。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129212506.png" title="console"><p>最后是通过 Chrome 等浏览器访问 WEB 服务。可以看到 localhost:8080/ 和 localhost:8080/hello 被我们的 HelloController 处理了。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129212829.png" title="chrome"><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213006.png" title="chrome2"><p>当然我们也可以使用 PostMan 工具模拟客户端请求，测试一下。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213230.png" title="postman"><h3 id="3、STS-问个好"><a href="#3、STS-问个好" class="headerlink" title="3、STS 问个好"></a>3、STS 问个好</h3><p>File / New / Spring Starter Project</p><img src="/2018/11/29/first-spring-boot-application/new_project.png" title="new project"><p>填写好 project 相关信息，Next</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129221029.png" title="next"><p>还是选择 web dependency 就好，然后点击 finish</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129221141.png" title="web"><p>以下是 STS 构建的 Spring Boot 工程。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129221323.png" title="spring boot"><p>同样编写一个 HelloController 用于处理前端请求。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129221551.png" title="hc"><p>STS 运行 Spring Boot 应用的方式为：右键 Application 启动类，Run As / Spring Boot App。</p><img src="/2018/11/29/first-spring-boot-application/run_as.png" title="sping boot app"><p>在 console 上可以看到 应用已经运行起来了。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129222026.png" title="console"><p>使用浏览器测试。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129222116.png" title="test"><h3 id="4、以-java-jar-方式运行"><a href="#4、以-java-jar-方式运行" class="headerlink" title="4、以 java -jar 方式运行"></a>4、以 java -jar 方式运行</h3><p>以下以 IDEA 为例演示 Spring Boot Maven jar 工程的打包，cmd 方式运行 WEB 应用。</p><p>调出 Maven 面板</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213442.png" title="maven panel"><p>找到 compile ，双击它</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213746.png" title="compile"><p>compile 成功后，IEDA 在 target 目录下为我们生成了 project_name.jar 可执行 jar 包</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129213930.png" title="jar"><p>右键它，选择面板中的 show in explorer，在 Windows 的资源管理器路径下输入 cmd 三个字母</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129214220.png" title="show"><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129214317.png" title="cmd"><p>最后在 cmd 下执行java -jar project_name.jar ，前提是停止了 IDEA 运行的 web 工程，否则会出现端口占用的问题。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129214430.png" title="cmd"><img src="/2018/11/29/first-spring-boot-application/微信截图_20181129214622.png" title="cmd result"><p>由以上可见，我们使用 java -jar 命令也能在 cmd 上运行 jar 应用。</p><h2 id="三、Spring-Boot-入口类探究"><a href="#三、Spring-Boot-入口类探究" class="headerlink" title="三、Spring Boot 入口类探究"></a>三、Spring Boot 入口类探究</h2><h3 id="1、入口类"><a href="#1、入口类" class="headerlink" title="1、入口类"></a>1、入口类</h3><p>程序从 main 方法开始执行，默认使用 SpringApplication.run() 加载主程序类</p><h3 id="2、-SpringBootApplication"><a href="#2、-SpringBootApplication" class="headerlink" title="2、@SpringBootApplication"></a>2、@SpringBootApplication</h3><p>实际上是个组合注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-SpringBootConfiguration"><a href="#2-1-SpringBootConfiguration" class="headerlink" title="2.1 @SpringBootConfiguration"></a>2.1 @SpringBootConfiguration</h4><p>其中，@SpringBootConfiguration 表示是 Spring 底层配置类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-ComponentScan"><a href="#2-2-ComponentScan" class="headerlink" title="2.2 @ComponentScan"></a>2.2 @ComponentScan</h4><p>@ComponentScan 是个组件扫描注解</p><h4 id="2-3-EnableAutoConfiguration"><a href="#2-3-EnableAutoConfiguration" class="headerlink" title="2.3 @EnableAutoConfiguration"></a>2.3 @EnableAutoConfiguration</h4><p>@EnableAutoConfiguration 是一个核心注解，表示允许 Spring Boot 完成自动配置功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-1-AutoConfigurationPackage"><a href="#2-3-1-AutoConfigurationPackage" class="headerlink" title="2.3.1 @AutoConfigurationPackage"></a>2.3.1 @AutoConfigurationPackage</h5><p>其中 @AutoConfigurationPackage 通过导入一个 AutoConfigurationPackages.Registrar 注册类为程序指定了自动配置的包范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br></pre></td></tr></table></figure><img src="/2018/11/29/first-spring-boot-application/微信截图_20181130001915.png" title="register"><img src="/2018/11/29/first-spring-boot-application/微信截图_20181130001106.png" title="packagename"><p> 由此可见，程序启动会扫描加载主程序类所在的包以及子包。这说明如果一个包位于主程序类所在包之外，是不会被 Spring 容器扫描实例化的。以下是简单的例子：</p><p>AnotherController 位于 com.shinedeer.springboot 包之外</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181130002413.png" title="out"><p>通过浏览器访问 localhost:8080/another 请求，结果返回 404。</p><img src="/2018/11/29/first-spring-boot-application/微信截图_20181130002533.png" width="404"><h5 id="2-3-2-Import-AutoConfigurationImportSelector-class"><a href="#2-3-2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="2.3.2 @Import(AutoConfigurationImportSelector.class)"></a>2.3.2 @Import(AutoConfigurationImportSelector.class)</h5><p>@Import 作用是导入所有自动配置场景</p><p>AutoConfigurationImportSelector 会给容器中导入非常多的自动配置类，形如 <strong>XXXAutoConfiguration</strong> ，就是给容器中导入 starter 需要的组件并进行配置。 </p><h2 id="四、相关-Demo"><a href="#四、相关-Demo" class="headerlink" title="四、相关 Demo"></a>四、相关 Demo</h2><ul><li>本文 Demo <a href="https://github.com/CalvinHwang123/IdeaProjects/tree/master/_001first-spring-boot-app" rel="external nofollow noopener noreferrer" target="_blank">占位符</a></li><li>Spring Boot Official Samples <a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h2><ul><li><p>Spring Boot 官方 reference <a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p></li><li><p>尚硅谷 Spring Boot 核心技术篇 <a href="http://www.atguigu.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p><p>​</p><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
